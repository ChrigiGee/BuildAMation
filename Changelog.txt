02-Apr-2014 Exporting TMP and TEMP environment variables with the VisualC tools, to avoid generation of _CL_<hexdigits> temporary files in the current directory.

09-Mar-2014 Speculative fix for bad dependency graph generation, when dependents increase rank, but don't need to maintain the same "delta" between themselves and their dependees because other dependees have not moved.

06-Mar-2014 Added DxErr.lib to the Direct3D9 libraries to link against.

06-Feb-2014 Throw an exception if a C preprocessor definition contains a space. This can disable tools such as VisualStudio Intellisense.

25-Jan-2014 Fixing the dependency graph population. Don't move nodes further down the graph, if they are already offset enough from their dependee. Otherwise, empty ranks appear in the graph.

06-Jan-2014 Added VisualC-12.0 (VisualStudio 2013) support for Native and VSSolution builders.

04-Jan-2014 Added C.ILinkerOptionsOSX property FrameworkSearchDirectories, that affects the linker search paths. Added to GccCommon's linker options.

04-Jan-2014 Added C.ICCompilerOptionsOSX interface, with a FrameworkSearchDirectories property to add a search folder containing frameworks for the compiler to find. Implemented this for the Clang-Apple425 compiler.

02-Jan-2014 Modules with an overriden OutputName now generate .vcxproj files for VS10+ that do not generate MSBuild warnings for mismatched names.

22-Dec-2013 Fixing new lines in generated .vcproj files for custom builds that can affect VisualStudio deciding whether to rebuild or not (MSB8015).

17-Dec-2013 Made Opus.Core.Array and Opus.Core.DirectoryLocation cloneable for use in option collections.

15-Dec-2013 Adding C.ICCompilerOptions.Undefines

13-Dec-2013 Fixing error writing out .vcxproj files with a compiler warning level set to zero.

10-Dec-2013 Another modification to the package assembly load, which now also reads in program database byte data, for untrusted locations, if -debugsymbols is passed on the command line.

10-Dec-2013 Opus.Core.DependencyNode now also has a bi-direction link for required modules, similar to external dependencies.

09-Dec-2013 Modification to the package assembly load. When debugging is enabled, the assembly must be from a trusted location.

09-Dec-2013 Raise an exception if a specific package version is not found in the registered roots. This can happen if package versions are spread across several roots.

22-Nov-2013 Loading the package assembly uses a different mechanism that should allow reflection over a semi-trusted source, e.g. a network drive.

06-Nov-2013 Added Opus.Core.DependencyNode.PostCreateOptionCollection, that wraps the extended logic of BaseOptionCollection.FinalizeOptions.

05-Nov-2013 Added new version of Location.SubDirectory which takes a Location.EExists flag. This can be useful to build up paths that will be created eventually.

05-Nov-2013 Added Opus.Core.EPlatform.NotWindows, NotUnix, and NotOSX, to allow exclusions of a single platform in target attributes.

05-Nov-2013 RequiredModule dependencies in Xcode projects are now represented as an optional link dependency. Deadstripping ought to resolve the extra size, and optional means that dyld will not attempt to load it at executable launch.

04-Nov-2013 Added new C OutputFileFlags, OSXBundle, OSXBundleContents and OSXBundleMacOS, for OSX application bundle builds, referring to the .app, .app/Contents, and .app/Contents/MacOS folders, respectively.

03-Nov-2013 Added Mingw-4.8.1

02-Nov-2013 Release 0.50 Alpha 6

02-Nov-2013 Removed Opus.Core.File. Use Opus.Core.Location or FileLocation as a replacement.

02-Nov-2013 Removed deprecated Opus.Core.Exception(string,System.Exception)

01-Nov-2013 Added Qt-4.8.5 package.

31-Oct-2013 Reworked the Opus.Core.Location API and usage. Location is an abstract base class. FileLocation is a subclass, and represents a single file. DirectoryLocation is a subclass, and represents a single directory. ScaffoldLocation is a subclass, and represents an ambiguous number of files or directories. Calling GetLocations() on a ScaffoldLocation returns a resolved list of Locations. Many File and Directory storage cases have been revised to use Locations, and some APIs have been broken in the process. Particularly, the Include/Exclude mechanism now only accepts a single pattern string, rather than a variable length array of subpaths.

31-Oct-2013 Added Opus.Core.Array<T>.SubArray, taking the index of the first element, and a count.

23-Oct-2013 Release 0.50 Alpha 5

22-Oct-2013 Added an action to XcodeBuilder, -warmschemecaches, that will warm the per-project cache of Xcode schemes, enabling the use of the commandline tool 'xcodebuild' to be used on a workspace, without having to load it into the Xcode UI. This action is disabled by default. It is useful for automated testing.

09-Oct-2013 Modified OpusOptionCodeGenerator so that option property gets are now aware of the super set option collections.

09-Oct-2013 Extending Opus.Core.BaseOptionCollection so delta option collections are aware of their super set option collections. This is essential for being able to reference any valid option in the delegates, without fear of it not being in a delta.

08-Oct-2013 Added SuppressReadOnlyRelocations to C.ILinkerOptionsOSX.

08-Oct-2013 Split C.ILinkerOptions into platform independent settings, and C.ILinkerOptionsOSX for OSX specific options (e.g. frameworks, etc).

06-Oct-2013 Added XcodeBuilder-dev builder.

29-Sep-2013 Added C.ICCompilerOptions.LanguageStandard enumeration option. Usual mapping of C89/C99 or C++98/11.

22-Sep-2013 Modules implementing the new Opus.Core.ICommonOptionCollection interface now intersect all their child option collections into a common set. These can be used as deltas for use in some builders.

21-Sep-2013 Added property EncapsulatingNode to Opus.Core.DependencyNode, as the DependencyNode in which this node resides. For example, if you are inspecting an ObjectFile within an Application, the encapsulating node is the Application.

18-Sep-2013 Added Opus.Core.BaseOptionCollection.Complement() function, to find the delta of two BaseOptionCollections.

17-Sep-2013 Added Opus.Core.Array.AddUnique method.

29-Aug-2013 Adding Opus.Core.Location which is an abstraction for a location on disk. Opus.Core.BaseModule has a dictionary of Locations, and a primary PackageLocation. This simplifies the Include and Exclude functionality to locate files, but is a breaking change to the API. Generally, for Include(this, ...) older style API, replace with Include(this.PackageLocation, ...). IModuleCollection.GetChildModule, used to update option collections on an individual source file, has been replaced with IModuleCollection.RegisterUpdateOptions

28-Aug-2013 Adding LLVMGcc-4.2 package for OSX.

19-Jul-2013 Reduced the number of ways to create an Opus.Core.DependencyNode to simplify the code.

18-Jul-2013 Added zeromq-3.2.3 package.

13-Jul-2013 Added Opus.Core.RelativePathUtilities.GetCommonRoot to find the common root between two paths. If there is no common root, null is returned.

13-Jul-2013 Opus.Core.File.ToString() now displays the path if it has been set.

12-Jul-2013 Added another constructor to Opus.Core.Exception, that accepts a System.Exception, followed by a format string, and variable arguments. This is switching the order of arguments for an existing constructor, now deprecated, to allow the format arguments.

12-Jul-2013 Merged debug and non-debug package compilation functions together to reduce code duplication.

12-Jul-2013 The -createdebugproject action no longer mandates the need for a -builder option, to select the builder in action. The C# project generated cannot be executed, so there is a benefit to seeing all applicable builder scripts. Performing an actual build will still require the -builder argument.

11-Jul-2013 Standardized all module Build() functions, to call the first argument (the instance of the module) 'moduleToBuild', so that it can be easily sought out.

11-Jul-2013 Replaced the unregulated PreExecute and PostExecute methods in Builder instances, with Opus.Core.IBuilderPreExecute and Opus.Core.IBuildPostExecute interfaces that need to be implemented should the builder require them.

11-Jul-2013 The build root directory is now created just prior to compiling the package assembly, rather than during argument parsing, which was too early.

07-Jul-2013 Added an argument to CommandLineProcessor.ICommandLineSupport.ToCommandLineArguments, that is either null, or an Opus.Core.StringArray, of names of options to NOT process. If options have been manually extracted from an OptionCollection, but a general run through of the command line arguments is needed, then this can be used to exclude those already processed.

07-Jul-2013 Added property Opus.Core.BaseOptionCollection.OptionNames to provide an array of strings for the options names.

05-Jul-2013 Reworked the QMakeBuilder support, now supporting debug & release .pro files. Dynamic libraries on Windows must write their import library to the same folder as the DLL.

05-Jul-2013 Opus.Core.StringArray now has a construct taking an Opus.Core.Array<string>. And added a ToString(char) overload to format the string array as a single string, separated by char.

05-Jul-2013 Added Opus.Core.FileCollection.ToStringArray()

05-Jul-2013 Added Union, Intersect and Complement functions to Opus.Core.Array for set notation operations.

05-Jul-2013 Added Opus.Core.Array.AddRangeUnique to avoid duplicate additions.

18-Jun-2013 Add Opus.Core.ModuleUtilities.GetNode, which returns the DependencyNode for a given module type and BaseTarget. This can be useful in builder code.

12-Jun-2013 Dependent nodes that have to move ranks, must take into account if the dependee has nested components.

12-Jun-2013 Updated OpenCL package to the new ThirdParty module scheme.

12-Jun-2013 Fixed GLEW-1.5.7 package for mingw builds, and added two test packages to the mingw test suite.

12-Jun-2013 Updated OpenGLSDK package to the new ThirdParty module scheme.

12-Jun-2013 Updated Direct3D9 module in the DirectX package to the new ThirdParty module scheme.

11-Jun-2013 QtCommon and Qt-4.7.1 updated to follow the new ThirdParty module scheme, demonstrating the ease of copying files in Test13.

11-Jun-2013 C.ThirdPartyModule now has a special tool type (C.IThirdPartyTool) with a minimal option collection. Overriding the C.ThirdPartyModule.RegisterOutputFiles virtual function in your derived classes then allows registering prebuilt files against Opus' usual output file enums. C.ThirdPartyModule.Libraries abstract function has been removed as it is now obsolete. This new system allows copying of files from ThirdParty prebuilds far easier.

04-Jun-2013 Gcc-4.0 Objective C and C++ option sets also use the Gcc-4.0 C visibility interface.

30-May-2013 VSSolutionBuilder now ignores the .dll extension on any reference assembly.

30-May-2013 C# .csprojs generated from the VSSolutionBuilder now includes the TargetFrameworkVersion element.

29-May-2013 Adding workaround in VSSolutionBuilder for C# solutions, referencing Any CPU. See http://connect.microsoft.com/VisualStudio/feedback/details/503935/msbuild-inconsistent-platform-for-any-cpu-between-solution-and-project.

15-May-2013 Opus.Core.IToolset now has a HasTool method to query if a tool has been registered, since calling Tool will throw an exception if not.

15-May-2013 Corrected the logic in NativeBuilder.DirectoryUpToDate

13-May-2013 OpusOptionCodeGenerator no longer throws an exception when an interface with no properties is used.

07-May-2013 Each package included into a build now adds a preprocessor definition of OPUSPACKAGE_<name>_<version>. Name and version are converted to upper case. Periods and dashes are replaced with underscores.

24-Apr-2013 Opus.Core.File.GetFiles() can now search through directories (last path segment is a directory) and also returns the common directory for all files found.

20-Apr-2013 Adding support for VisualStudio 2012, package VisualC-11.0

20-Apr-2013 Generalizing Opus.Core.Win32RegistryUtilities access and adding accessors to the current user area. If you used any functions from this before, finding 32-bit registry keys is now more explicit.

15-Apr-2013 Package assembly re-use now includes a hash of the Opus assemblies.

09-Apr-2013 Added -explain action to the NativeBuilder, which will output an explaination of why files are built, at the current verbosity level.

09-Apr-2013 Release 0.50 Alpha 4

08-Apr-2013 Added -ih option to OpusOptionCodeGenerator to ignore header updates to the delegates file. This allows updating option files on different platforms.

08-Apr-2013 Added C.ILinkerOptions.OSXFrameworks Opus.Core.StringArray option, to list the names of frameworks to link against.

05-Apr-2013 Replaced C.OSXAppBundle module type, with a Boolean option on C.ILinkerOptions, called OSXApplicationBundle (defaults to false). Module type for bundles should now just be C.Application or C.WindowsApplication, which merges better with non-OSX platforms.

04-Apr-2013 Marked XmlUtilities' plist options properties as state only, and auto-generated support files

04-Apr-2013 OpusOptionCodeGenerator now recognizes a comment // StateOnly above a property in an interface file to indicate that the property has no delegates to register.

03-Apr-2013 Added help to OpusOptionCodeGenerator if no arguments are passed.

02-Apr-2013 VisualCCommon-dev is now dependent upon WindowsSDK-6.0A.

02-Apr-2013 Released 0.50 Alpha 3

02-Apr-2013 Gcc Objective-C disables strict aliasing as it causes type punning warnings with the use of 'super'.

27-Mar-2013 Added package XmlUtilities-dev with basic NativeBuilder XML serialization. Also added an OSX Plist module.

27-Mar-2013 Updated test packages CodeGenTest-dev and CodeGenTest2-dev to use FinalizeOptions rather than individual set handlers, since they have the same side-effect.

26-Mar-2013 OptionCollection finalization now occurs as a separate run from option creation. Creation occurs from top most parent module to lower most child, so that children inherit their parents options. Finalization now occurs in the reverse order, so that modules can query their dependents' options for state.

21-Mar-2013 Added C.OSXAppBundle module type, for creating the directory structure for an OSX application bundle, i.e. <name>.app/Contents/MacOS.

21-Mar-2013 Changed Opus.Core.BaseOptionCollection.FinalizeOptions to take a DependencyNode rather than a Target.

08-Mar-2013 Adding ObjectiveCTest1 and CocoaTest1 test packages.

08-Mar-2013 Introduced ObjectiveC and ObjectiveC++ support into C-dev, and Gcc-4.0 for OSX.

08-Mar-2013 Moved Win32 Resource Compiler dependency from the C package to the VisualCCommon package.

23-Feb-2013 Throw an exception if the package version specified on the command line does not match the *single* version in the package definition file.

23-Feb-2013 From the C package, deprecating the addition of the #define D_OPUS_PLATFORM_<specific EPlatform>. Now D_OPUS_PLATFORM_WINDOWS, D_OPUS_PLATFORM_LINUX, D_OPUS_PLATFORM_OSX are set. Use D_OPUS_PLATFORM_BITS to distinguish between 32 and 64 bit builds.

15-Feb-2012 Adding more circular dependency analysis to avoid issues generating graphs.

07-Feb-2012 Fixing -createpackageat such that an invalidly specified pathname does not result in the creation of any directories.

06-Feb-2012 Setting the number of jobs to zero, will now set the job count to be equal to the number of processors available.

06-Feb-2013 Loosened requirements for -showdefinition to locate packages in package roots. If versions of a package are available, but does not match one desired, this will not throw an exception, but will indicate a missing package in the results.

06-Feb-2013 Released 0.50 Alpha 2

05-Feb-2013 DependencyNodes can now be excluded from build scheduling. This allows nodes to persist within the graph, and benefit from graph manipulations, but be quickly passed over if they are not actually needed. For example, in the case of a simple C/C++ setup, with two dependent static libraries. Building just one does not require the other to be built to satisfy the build. Using Opus.Core.IForwardDependenciesOn will re-enable nodes for build scheduling if future dependencies require them.

04-Feb-2013 Added Opus.Core.IForwardDependenciesOn, which if used on a module type, will forward all of it's dependencies onto parent nodes. For example, if a C.StaticLibrary is dependent upon another StaticLibrary, that dependency is not used until an application links the first library. Then both are required to satisfy symbol requirements.

04-Feb-2013 Simplified the logic in creating an Opus.Core.DependencyNode from a module type, by moving that logic to the ModuleFactory.

31-Jan-2013 Adding IncrementalLink boolean option to VisualCCommon.ILinkerOptions.

29-Jan-2013 Restoring response file support for valid Gcc versions.

29-Jan-2013 Adding Opus.Core.ToolAndOptionType class, as a helper for constructing IToolsets. Updated Clang, ComposerXE, Mingw and VisualC toolsets to use the new class.

26-Jan-2013 Fixing VisualStudio 2005 and 2008 selection of Express or Professional versions for VSSolution builds.

25-Jan-2013 Implemented C.ICharacterSet options. These just set #defines (_UNICODE,UNICODE) and _MBCS on the compiler options.

25-Jan-2013 Adding option '-noresponsefiles' when using command line builds to exclude the use of response files (assuming the tools used support them).

24-Jan-2013 Released 0.50 Alpha 1

24-Jan-2013 Removing obsolete API
 - Opus.Core.DirectoryCollection.Add
 - Opus.Core.FileCollection.AddRelativePaths
 - C.CxxObjectFileCollection.AddRelativePaths
 - C.ObjectFileCollection.AddRelativePaths
 - QtCommon.MocFileCollection.AddRelativePaths

23-Jan-2013 AssemblyVersion is now auto-incrementing. AssemblyInformationVersion is set to the current version.

23-Jan-2013 Removed notoolchain.rsp from the testpackages directory, and removed references to it in the test harness.

23-Jan-2013 Unit test Python scripts now accept an option to exclude some response files. E.g. if you don't have Mingw installed on your Windows box, then tests specifically for that toolchain can be excluded.

19-Jan-2013 Renamed OpusOptionInterfacePropertyGenerator to OpusOptionCodeGenerator

17-Jan-2013 Show definition file action identifies default package versions with an asterisk.

17-Jan-2013 Added -setdefaultversion=<true|false> command line action, which requires -dependent=<package> to be defined too.

17-Jan-2013 Changed the Opus definition file schema so that package <version> elements can contain an optional Boolean 'Default' attribute, which indicates a default version of that package. If there are multiple versions of that package, this is chosen. Only one default version may be set per package. The default version in definition files can be overridden on the command line with the -<packagename>.version=<versionnumber> action.

17-Jan-2013 Added Opus.Core.State.InvokedActions returning an array of IActions that were invoked (can be multiple instances). Added Opus.Core.ActionManager.FindInvokedActionsByType to identify invoked actions of a specific type.

16-Jan-2013 Package hashing now includes the #defines passed to the compiler.

15-Jan-2013 A null tool type cannot be passed to the constructor of Opus.Core.ModuleToolAssignmentAttribute.

15-Jan-2013 Opus.Core.Exception no longer has a constructor taking a boolean to indicate a stack trace is printed.

15-Jan-2013 Opus.Core.Log now copes with unescaped braces in the format string passed. Previously this would result in an exception thrown, but could be caused by C code output from compiler warnings/errors.

09-Jan-2013 Opus.Core.IAction now also inherits from System.ICloneable.

04-Jan-2013 Opus.Core.IToolEnvironmentVariables.Variables now takes a BaseTarget rather than a Target.

04-Jan-2013 C.ThirdpartyModules now have a C.INullOpTool assigned to them, in order for Targets to be fully qualified with a toolset. This is useful because Thirdparty libraries must have been built with a toolset, so should be identifiable.
            Fetching an instance of a Target now requires a non-null Opus.Core.IToolset instance.

03-Jan-2013 Opus.Core.IToolEnvironmentPaths has been removed. Use IToolEnvironmentVariables instead.

02-Jan-2013 Opus.Core.ITool.Executable now takes an Opus.Core.BaseTarget instead of a Target.

20-Dec-2012 Package definition files now accept a relative path to the schema. This avoids problems in earlier versions of Opus that could reference multiple copies of the schema. An exception is now thrown with old style definition files. Running commands again with -forcedefinitionupdate resolves that.

20-Dec-2012 Adding action '-forcedefinitionupdate' which will immediate write out package definition files after they have been read. This can be used to force any updates required in future Opus versions.

16-Dec-2012 Adding support for a package with multiple versions to be valid for a given build (to indicate supported builds). A build must narrow down to a single version though, so a new command Action, <packagename>.version, has been introduced, which can be used to select the version required.

16-Dec-2012 Adding Opus.Core.IActionCommandComparison, for an action that requires a custom command comparison.

27-Nov-2012 Adding in C.ICCompilerOptions.CharacterSet to select the target character set for the compiled code. Support may vary between compilers.

27-Nov-2012 Adding C.IWinImportLibrary interface, that classes implementing C.ILinkerTool also need to implement if they support generating a Windows import library for dynamic libraries.

26-Nov-2012 Adding Opus.Core.Exception constructor that accepts a format string and a variable number of arguments.

25-Nov-2012 Opus.Core.IModule now only lists the required option and proxy path methods/properties. Opus.Core.BaseModule is a new abstract class (implementing IModule) that each module class must now derive from. This allows virtually all of the common methods to be implemented in the base class to simplify the derived module classes. Also, option updates are now performed through a clean interface in user written module instances.

22-Nov-2012 Renamed compiler specific CPlusPlusXYZ classes to CxxXYZ.

22-Nov-2012 Renamed C.ETargetLanguage.CPlusPlus to C.ETargetLanguage.Cxx.

22-Nov-2012 Renamed the namespace C.CPlusPlus to C.Cxx.

22-Nov-2012 C.ICPlusPlusCompilerOptions has been renamed to C.ICxxCompilerOptions.

21-Nov-2012 Exception reporting has been inverted so that the innermost exception is now reported first, alongwith it's callstack. This ensures that the most relevant exception message appears first.

19-Nov-2012 Opus.Core.ITargetFilters no longer accepts a Toolchains keyword attribute, but now a ToolsetTypes System.Type[] keyword attribute. Generally, use typeof(package.Toolset) to fill out this attribute.

16-Nov-2012 CSharp package no longer has a -CSharp.toolchain action. This is due to changes to where the C# compiler is location (now the DotNetFramework package).

15-Nov-2012 CommandLineProcessor.Processor.Execute no longer takes a string for the executable path, since it can be derived from the ITool and the Node's Target.

15-Nov-2012 VisualC 10.0 now checks for both Express and Professional versions for solution builds.

15-Nov-2012 Renamed Opus.Core.IToolRequiredEnvironmentVariables to Opus.Core.IToolForwardedEnvironmentVariables

14-Nov-2012 Removed Opus.Core.AssignOptionCollectionAttribute as it is has been superceded by Toolsets.

14-Nov-2012 Removed Opus.Core.RegisterTargetToolChainAttribute as it has been superceded by Toolsets.

14-Nov-2012 Removed C.ClassNames as it has been superceded by Toolsets and tool interfaces.

14-Nov-2012 Removed Opus.Core.AssignToolForModuleAttribute as it has been superceded by Toolsets.

14-Nov-2012 Removed Opus.Core.MapToolChainClassTypesAttribute as it has been superceded by Toolsets.

14-Nov-2012 Removed Opus.Core.TargetCollection that is no longer used.

14-Nov-2012 VisualCCommon.ICCompilerOptions now has a RuntimeLibrary option. This is in replacement to the option from the now removed Toolchain.

14-Nov-2012 CSharp Csc tool has moved to the DotNetFramework package, the latter of which now implements a 'dotnet' toolset.

14-Nov-2012 Tool interfaces are now required for each type of tool implemented. Local and export types must be assigned to the interfaces using the Opus.Core.LocalAndExportTypes attribute. Toolset providers must also be provided using the Opus.Core.AssignToolsetProvider attribute.

14-Nov-2012 Opus.Core.AssignToolsetProvider is a new attribute for tool interfaces that accept a name of a toolset, or a type of a class and a delegate method in that class to dynamically assign a toolset.

14-Nov-2012 C and C++ compilers are now separate tool interfaces.

14-Nov-2012 Modules now require an attribute of Opus.Core.ModuleToolAssignment, which accepts one argument, the type of the tool interface to use to build the module. The type may be null to indicate no tool required.

14-Nov-2012 Added actions to override the C compiler, C++ compiler, Linker, Archiver, and Win32 resource compiler by specifying the toolset defining the tool:
* -C.CC=<toolset>
* -C.CXX=<toolset>
* -C.LINK=<toolset>
* -C.AR=<toolset>
* -C.RC=<toolset>

14-Nov-2012 Optimized header file dependency checking for Native C object file builds.

14-Nov-2012 MakeFileBuilder module Build functions will forward on any environment variables required.

14-Nov-2012 Added Opus.Core.IToolEnvironmentVariables if a tool requires environment variables other than PATH.

14-Nov-2012 C.Toolchain has been removed.

14-Nov-2012 The OpusOptionInterfacePropertyGenerator tool now outputs delegate function stubs, as well as properties. Delegates with implementations are preserved.

14-Nov-2012 Opus.Core.BaseOptionCollection declares two abstract methods, InitializeDefaults and SetDelegates. Derived classes are now required to implemente this. It is no longer the responsibility of the derived classes to call these functions as they are invoked by BaseOptionCollection.

14-Nov-2012 Opus.Core.Target now contains a reference to an IToolset, instead of a name of a toolchain.

14-Nov-2012 Opus.Core.IToolset introduced. A toolset is a named collection of tools.

03-Oct-2012 Added Opus.Core.OSUtilities functions taking BaseTarget and Target arguments.

03-Oct-2012 Added Opus.Core.TargetUtilities helper class migrating utility functions from the Target class itself.

03-Oct-2012 Added new Opus.Core.BaseTarget class, which is the Platform+Configuration part of the original Target class. The new Target class now consists of a BaseTarget + toolchain. The internal structure of the BaseTarget and Target classes are no longer exposed directly - there are helper functions available now.

03-Oct-2012 If a debugger is attached, but Mono is detected, output is written to the Console, rather than the Diagnostics.Debug stream, as there is no obvious pane in MonoDevelop to capture the latter.



29-Sep-2012 Property generation for interfaces is now an explicit implementation for the OptionCollections rather than public functions. Interfaces must be used rather than the option collection types to access the properties.

06-Sep-2012 Fixing Gcc linker option AllowUndefinedSymbols for OSX. For OSX this is -Wl,-undefined,dynamic_lookup and -Wl,-undefined,error, while on other Gcc variations, it is -Wl,-z,nodefs and -Wl,-z,defs.

01-Sep-2012 Fixing the RenderTextureAndProcessor test for MSVC 64-bit compilation.

01-Sep-2012 Fixing the WindowsSDK-6.0A 64-bit binary path.

01-Sep-2012 Fixing the AMDAPPSDK-2.5 64-bit library path.

31-Aug-2012 Error log messages now go to stderr.

23-Aug-2012 Opus.Core.BuildAgent's ReportFailure property is now entirely private.

23-Aug-2012 Removed old batch file/shell script/text file unit test framework, and replace with a Python based framework.

23-Aug-2012 The Opus shell script is now compatible with Cygwin and MSYS shells on Windows.

02-Aug-2012 Set version to 0.50.

--------------------------------------------------------------------------------

v0.40
=====

07-May-2012 First pass support for the Intel XE Composer toolchain. Use C.toolchain=intel to run.

16-Apr-2012 Qt Moc tool now includes a default #define of QT_VERSION which is equal to the hex of the version number, e.g. Qt-4.7.1 is QT_VERSION=0x040701.

09-Apr-2012 Correcting help text to correspond to the separator for multiple values on different platforms. (Colon or semi-colon)

08-Apr-2012 Deprecated Opus.Core.DirectoryCollection.Add, and other AddRelativePath methods. Use the Include methods instead.

31-Mar-2012 Added source file hashing dependency generation. .c/.cpp/.h source files are hashed in a separate thread and cached. If timestamp checks fail, hashes are compared. If hashes are identical, no build occurs. This feature is disabled by default, and enabled by adding the define OPUS_ENABLE_FILE_HASHING to a package.

31-Mar-2012 Capture Ctrl+C and allow the build to gracefully fail.

29-Mar-2012 Linux/OSX Opus shell script will now call mono with --debug when -debugsymbols is passed as an argument. Running mono with --debug gives additional useful information in stack traces.

27-Mar-2012 Adding Defines option to CSharp.IOptions. Debug configurations get DEBUG. Profile configurations get TRACE.

27-Mar-2012 Fixing C# VSSolutionBuilder option for Checked (Over/underflow) and Treat Warnings as errors. Profile configurations now also get debug information.

27-Mar-2012 Removed Opus.Core.BuildSchedulerEx that is now redundant.

27-Mar-2012 Renamed Opus.Core.BuildScheduler to Opus.Core.DefaultScheduler.

27-Mar-2012 Explicitly implemented the IActionWithArguments method AssignArguments in all the actions, rather than making the method public, as it is not required to be called other than through the interface.

27-Mar-2012 Only validate package definition schema locations for the top-most package. This avoids errors occuring by the XML parsing when two dependent packages both have valid paths to the same schema.

26-Mar-2012 Fixes to the tests for pedantic warnings.

26-Mar-2012 Adding GccCommon and MingwCommon Pedantic Boolean option for ICCompilerOptions, for -pedantic. Defaults to true.

25-Mar-2012 Using a nice shell script syntax to simplify the env.sh script.

25-Mar-2012 Fixing a warning in the Bash scripts for the testpackages under Linux.

25-Mar-2012 Added workaround in Opus.Core.BaseOptionCollection.FilterOutputPaths to an invalid cast exception in Mono, from a SortedDictionary to a KeyValuePair in a foreach.

24-Mar-2012 C# VSSolutions generated now display a directory hierarchy for the source in the projects.

24-Mar-2012 Ensuring that C# projects generated with multiple configurations do not have duplicate assembly references.

24-Mar-2012 Adding Opus.Core.UniqueList generic class.

14-Mar-2012 VisualCCommon's CCompilerOptionCollection and LinkerOptionCollection now expose ProgramDatabaseDirectoryPath, which is the directory containing any .pdb files generated.

14-Mar-2012 Changed Opus.Core.OutputPaths to use a SortedDictionary internally, so that when paths are extracted, they are ordered by their identification key flag.

12-Mar-2012 Action value separators are now System.IO.Path.PathSeparator. Semi-colon ';' on Windows, and ':' for *nix platforms.

08-Mar-2012 Many Opus.Core.IModule methods are now implemented explicitly, since they are only used internally, and just clutter the Intellisense in IDEs.

02-Mar-2012 Fixing bug with CommandLineProcessor with Opus.Core.ITools that require more than one path to be added to PATH.

01-Mar-2012 Added C.Win32Resource module in order to compile .rc files.

01-Mar-2012 Improved VSSolutionBuilder's support for generating paths relative to intermediate and output paths or the project file itself.

22-Feb-2012 Improved Opus.Core.BuildManager checks for node failure, so that future nodes do not start when a dependency has failed.

20-Feb-2012 Added GetChildModule function to the Opus.Core.IModuleCollection interface. This allows access to child modules of a collection so that option updates can be performed on them additionally to those inherited from the collection.

19-Feb-2012 Added Gcc linker option 'AllowUndefinedSymbols'. This defaults to true for shared objects and false for applications.

19-Feb-2012 Gcc versions now expose the compiler option "Visibility" properly.

18-Feb-2012 Added a Unix/OSX bash shell script to run the testpackages as a set of unittests.

18-Feb-2012 Added a Windows batch file to run the testpackages as a set of unittests.

18-Feb-2012 If a package definition file has two versions of a package, one with a filter, one without, and the filter matches the current host, fix the problem that the filtered version was not taken.

18-Feb-2012 Reverted 0.30 change; many packages were listed as only being supported on some platforms, which required OPUS_HOST_xxx preprocessor definitions in multiplatform scripts. This made the scripts messy and harder to read and maintain. Since assembly caching now works, the cost of compiling package assemblies is reduced, so removing unused packages on some platforms is less important.

18-Feb-2012 Fixing time profiling utilities for builds with zero nodes in the graph.

18-Feb-2012 Fixing Opus.Core.BuildScheduler for builds with zero nodes in the graph.

18-Feb-2012 Gcc-4.0 manual does not specify response file support. Neither does 4.1, but it does work.

16-Feb-2012 Added Opus.Core.State.BuildStartedEvent, which is issued by the BuildManager. This can be used by additional build threads to wait until the build has started.

16-Feb-2012 Fixed ridiculously high CPU load from the C include dependency checking thread.

13-Feb-2012 Opus.Core.BaseOptionCollection now has a virtual FinalizeOptions method. This can be overridden in any of the option collection classes, and is executed after all option update delegates have been issued. This can be used to set output paths, for example.

12-Feb-2012 Adding CanUseOrigin (bool) and RPath (StringArray) to the Gcc linker options for the 'z origin' and 'rpath' features.

10-Feb-2012 Include dependency generation no longer writes duplicate file paths to .d files. Also, any 'nested' includes that do not contain any #includes will no longer terminate the search early.

08-Feb-2012 Schedulers now check for empty rank node collections in their constructors, rather than on every call to get the next Node to build. Opus.Core.BuildScheduler also now removes completed ranks from it's search for the next available Node to build.

07-Feb-2012 Opus.Core.DependencyNodeCollection now has a ManualResetEvent (an array of one to be precise) that is signalled when all of it's DependencyNodes have been built. The BuildManager, when an agent is available but there is no Node in a state to be built (waiting on dependencies), will now wait on running Node builds to finish before calling the scheduler again, rather than spinning.

05-Feb-2012 QtCommon.BinPath and LibPath and includePaths are now instance field/properties.

04-Feb-2012 Removed EnvironmentPaths function from Opus.Core.ITool, and added it to it's own interface, Opus.Core.IToolEnvironmentPaths, as the Paths function. Only tools that need to extend the PATH environment need to implement that interface now.

04-Feb-2012 Removed RequiredEnvironmentVariables property from Opus.Core.ITool, and added it to it's own interface, Opus.Core.IToolRequiredEnvironmentVariables, as the VariableNames property. Only tools that need environment variables need to implement that interface now.

02-Feb-2012 Improved ToString() implementation for DependencyNode.

02-Feb-2012 Bug fix to the dependency graph generation, caused by nested dependencies to the same module, resulting in empty collections of dependency nodes.

30-Jan-2012 Removed redundant Thread from Opus.Core.BuildAgent, since the threadpool is used.

29-Jan-2012 Opus.Core.File.SetRelativePath now takes a module's proxy path into account.

29-Jan-2012 While generating the dependent list of packages for compilation, ensure that only those valid for the current platform are considered.

29-Jan-2012 Adding SymLink module types to the FileUtilities package. This supports soft links to files and directories. Native build support is provided. A test package 'SymLinks-dev' is provided to test the support.

28-Jan-2012 Opus.Core.DirectoryCollection implementation simplified. Consistency with FileCollections allow using Include and Exclude methods. Opus.Core.PackageAndDirectoryPath is now redundant and has been removed.

28-Jan-2012 Handle the case of cloning a Opus.Core.ReferenceTypeOption that has null as it's value.

28-Jan-2012 Project Guids in .vcprojs/.vcxprojs/.csprojs are now deterministic after regenerating the solution. These are based upon the paths of the project files.

28-Jan-2012 Optimization to writing .vcprojs, while refactoring paths for OutDir and IntDir macros.

28-Jan-2012 Optimization to writing .vcprojs. Only add a trailing directory separator to the OutDir and IntDir variables once.

28-Jan-2012 Ensure that .vcprojs generated have the intermediate directory set, if they have moc entries.

26-Jan-2012 Optimization to Opus.Core.ModuleUtilities.GetModule(), that speeds up option collection generation.

25-Jan-2012 Adding Opus.Core.ModuleGroup attribute to apply to classes (modules). This accepts a string as the single argument. For some versions of VisualStudio, this is used to generate Solution Folders, and places those marked modules with in them.

25-Jan-2012 Opus.Core.DependencyNodeCollection now has an overridden ToString() method. This displays the rank and how many nodes are contained within.

25-Jan-2012 The build schedule update event is now in the Opus.Core.IBuildScheduler interface, and delegates are attached through adding them to the array in Opus.Core.State.SchedulerProgressUpdates.

24-Jan-2012 Opus.Core.DependencyNodeCollection is now cloneable. The DependencyNodes are not cloned.

24-Jan-2012 Added command line switch '-scheduler=<type name>', which allows defining a custom scheduler for the build. The class must implement the Opus.Core.IBuildScheduler interface.

24-Jan-2012 Replaced System.String.Format with System.Text.StringBuilder in Opus.Core.Log.

24-Jan-2012 Improved threading support in the background thread of the Opus.Core.BuildManager that processes textual messages from DependencyNode build methods.

23-Jan-2012 Improved threading support in the Opus.Core.BuildManager.

22-Jan-2012 Fixing Null reference exception in QMakeBuilder for C.ObjectFileCollection when it is empty.

22-Jan-2012 Disabling more Qt configurations by default.

22-Jan-2012 Fixing warnings from QtCreator that unquoted backslashes are deprecated for recent executables added to the scripts.

22-Jan-2012 Added VisualC linker option 'IgnoredLibraries', taking an array of strings.

22-Jan-2012 Added VisualC linker option 'StackReserveAndCommit', taking a string of the format 'reserve[,commit]' to set the stack size and, optionally, the commit.

22-Jan-2012 C AdditionalOptions have been moved to the end of the option collection, so that they override all settings before hand.

22-Jan-2012 Versioned compilers with specific option interfaces must also have their C++ equivalents derive from them, in order to propogate the additional C options. (Because of the SetDelegates change.) This still shares a lot of code with the common C++ option collections. This had to be done because C# does not allow deriving from a generic type.

22-Jan-2012 Opus.Core.BaseOptionCollection now has a virtual function SetDelegates(), which is required to be implemented by derived classes in order to assign delegates to handling each option.

22-Jan-2012 Removing 'Commandline: ' prefix from all verbose native build output. It does not improve the readability of the output.


22-Jan-2012 Adding DisableWarnings C options, which takes an Opus.Core.StringArray value. For VisualC, this is a list of compiler warning numbers to disable. For Gcc-like compilers, this is the name of the warning to disable, e.g. for -Wno-used-parameters pass "used-parameters". No warnings are disabled by default.

22-Jan-2012 Opus.Core.StringArray is now cloneable and can be used as an option value.

22-Jan-2012 Improved error checking while cloning reference types used in option collections.

22-Jan-2012 Improved error message if an option value has not been given a default.

21-Jan-2012 Fixing Opus.Core.RelativePathUtilities.MakeRelativePathAbsoluteToWorkingDir with relative paths containing '..'. These were not collapsed into a canonical pathname.

21-Jan-2012 The compiled assembly for a package is now written to the buildroot, and also a hash of the source code. If this hash is the same for the next run, the assembly is re-used. This can be disabled with the -nocache command line option.

21-Jan-2012 Enabled header dependency generation in C native builds by default. This can be disabled by passing -C.noheaderdeps on the command line to Opus.

21-Jan-2012 Added new plugin package: DependencyGenerator-dev. This adds support for generating .d files containing dependency information from files that have #include statements. Only statements using the quoted version, i.e. #include "file.h" are found. Those using the angle bracket version, i.e. #include <file.h>, are ignored since these are considered to be system headers.

21-Jan-2012 Added Opus.Core.State.Get function with a generic struct type default value argument. If the category/key are not present, the default value is returned.

21-Jan-2012 C.Compiler now has a new abstract property IncludePathCompilerSwitches.

19-Jan-2012 Added new properties to Opus.Core.BuildManager: Finished and AdditionalThreadCompletionEvents. This is so that plugins can attach additional worker threads during the build. The former is a ManualResetEvent that is signalled when the build ends. This can be used to tell the additional threads to prepare to shut down. The latter is a list of ManualResetEvents that plugins can provide for each additional thread, and BuildManager waits on these to be signalled at the end of the build, allowing the threads to shut down cleanly. The current BuildManager can be identified through Opus.Core.State.BuildManager. This will only be valid when a build is just about to start.

19-Jan-2012 Adding Opus.Core.GetModuleNoToolchain, which can locate a module by just inspecting the Target's platform and configuration.

19-Jan-2012 Added Info message at the end of the build, showing the number of data entries (Nodes in the Graph) as an idea of how much work was done.

19-Jan-2012 Adding Include and Exclude methods to C.ObjectFileCollection, C.CPlusPlus.ObjectFileCollection and MocFileCollection.ObjectFileCollection.

18-Jan-2012 Any directory structure in the main package's Script folder is now represented faithfully in a debugging Opus project.

18-Jan-2012 The Global Option Override delegate should be executed BEFORE any other.

18-Jan-2012 In Opus.Core.Target, cache the 'key' used to identify instances, rather than using System.String.Format for each request, which is slow.

18-Jan-2012 Added methods Include and Exclude to Opus.Core.FileCollection. The former maps to AddRelativePaths, while the latter is new and will remove any files matching the pattern that the FileCollection already is aware of.

18-Jan-2012 Only schedule output from nodes built if there is something to output. This is another optimizations - the end of the build was waiting for a thread to process all of the empty strings.

17-Jan-2012 Optimization while creating option collections, so that update delegates are only added once to a node.

17-Jan-2012 Added better granularity to the timing item GraphGeneration; split into PopulateGraph, CreatOptionCollections, HandleInjectionDependents.

17-Jan-2012 Improved debugging messages while attaching update delegates to modules's UpdateOptions event.

17-Jan-2012 Gcc compiler, archiver and linker supports response files.

16-Jan-2012 Adding a WindowsSDK version 'VC8PlatformSDK' that is the PlatformSDK within the VisualStudio 2005 installation folder.

16-Jan-2012 VisualC compiler, archiver and linker supports response files.

16-Jan-2012 Added new interface, Opus.Core.IToolSupportsResponseFile, that requires a tool to provide the response file argument.
            CommandLineProcessor package uses this to write the options usually passed directly to the tool, to the response file instead, and make use of it.

15-Jan-2012 Qt.IMocOptions now exposes a PathPrefix option (moc -p <path>)

15-Jan-2012 Modules at the top-level namespace were duplicated even though they were used as fields for another top-level module.

15-Jan-2012 Dependency graph generation used to be able to create multiple DependencyNodes for a single IModule's child dependencies.

14-Jan-2012 QMakeBuilder now distinguishes between QMAKE_CFLAGS and QMAKE_CXXFLAGS.

14-Jan-2012 Gcc and Mingw, -Wall and -Wextra are set first on the command line so that subsequent warning disables work.

14-Jan-2012 QMake .pro files now have QMAKE_CC, QMAKE_CXX, QMAKE_LINK and QMAKE_MOC variables set.

14-Jan-2012 The IgnoreStandardIncludePaths C compiler option really doesn't inject the compiler include paths. VisualC is different, as it assumes an environment is set up.

14-Jan-2012 Added Qt moc support for QMakeBuilder.

14-Jan-2012 Fixing VSSolutionBuilder for .vcxprojs for header files with custom build steps not appearing under the Header Files filter in the solution explorer.

14-Jan-2012 Added Qt moc support for the VSSolutionBuilder, for both .vcproj and .vcxproj.

14-Jan-2012 Issue 55. DynamicLibrary dependency checking no longer compares against the static import library, which is not always written after incremental code updates, so gives false positives about the need to relink.

14-Jan-2012 Native build dependency checking will now output reasons for dependency failures when running with -verbosity=3, rather than just in debug mode.

14-Jan-2012 Add a new property to Opus.Core.IModule, ProxyPath, that allows a module to proxy data on another part of a storage medium. For example, if an AddRelativePaths(this, ...) function is called, 'this' will return the proxied path, not the package directory that the module refers to. The ProxyPath can be relative (to the package directory) or absolute.

13-Jan-2012 QtCommon.MocOptionCollection now implements the QtCommon.IMocOptions interface.

12-Jan-2012 Allow packages to have versions containing dashes.

12-Jan-2012 Qt packages can provide more than one include path.

12-Jan-2012 Gcc, Mingw, Qt, and VisualC packages, when passed an installation directory, now also check these relative to the working directory.

12-Jan-2012 Opus.Core.File.GetFiles threw an exception if the path segments contain '..'. This can still happen (see System.String.Directory.GetFiles on MSDN), but if they occur at the start of the path segments, they can be moved to the base directory.

10-Jan-2012 Opus.Core.File.GetFiles will no longer throw an exception when no files match the pattern used. A detail log message is output instead.

10-Jan-2012 DirectXSDK package will now throw a sensible exception if the SDK is not installed.

09-Jan-2012 VisualStudio projects for C application/dynamic library/static library with no input files are no longer generated.

09-Jan-2012 Native build C link or archive steps no longer throw an exception when there are no input files. A detail message is output, however.

09-Jan-2012 Improved exception message when a package is failed to be located in any package root.

09-Jan-2012 Issue 54. Relative package roots now work correctly. Internally they are converted to absolute paths.

08-Jan-2012 VS2010 project URIs could fail to be generated when they were relative paths.

08-Jan-2012 Guarding against calling System.Uri.MakeRelativeUri for relative URIs

08-Jan-2012 VS2010 project file generation with 'UniqueIdentifiers' now write out GUIDs in upper case for consistency.

08-Jan-2012 Issue 53. Fixing formatting of package debug project GUID so that Monodevelop generated solutions will open successfully after an initial save.

08-Jan-2012 Fixing generation of package debug projects, which used an incorrect token for the 'Any CPU' platform.

24-Dec-2011 Multiplatform Windows VisualStudio project generation will now enable builds for more than just the first platform specified, e.g. if -platforms=win32;win64 then only win32 would build in the IDE previously.

22-Dec-2011 Reordering library link order so that project libraries come first, then specified external libraries, then system libraries. This appears to resolve inter-dynamic-library dependencies in Gcc-4.5 upwards when --as-needed is specified to ld.

21-Dec-2011 Fixing system include paths for Gcc-4.4, 4.5 and 4.6 for Ubuntu 11.10.

21-Dec-2011 Adding Gcc-4.5 support for Linux. A new include path under /usr/include needed to be added.

21-Dec-2011 Only adding quotes around paths and filenames when they contain spaces.

21-Dec-2011 Removing some extranous spaces in commands.

21-Dec-2011 Adding Gcc-4.6 support for Linux. A new include path under /usr/include needed to be added.

18-Oct-2011 Issue 52. Fixed Gcc include-fixed paths.

04-Oct-2011 Used some OpenCL preprocessor magic (__NO_STD_VECTOR) to avoid the use of std::vector in the test program. Also added support to the test if there was a GPU OpenCL device but not a CPU device.

02-Oct-2011 Issue 49. Added EnableAutoImport linker option to Mingw. See http://sourceware.org/binutils/docs-2.16/ld/WIN32.html

02-Oct-2011 Issue 48. Scheduler updates are now reported via a C# event and only when percentage completion has changed.

02-Oct-2011 Fixed Mingw-4.5.0 compilation.

02-Oct-2011 Removing obsolete spaces at the end of command line arguments.

25-Sep-2011 Issue 40. VisualStudio 2010 source files in the IDE Solution Explorer appeared as a flat list. Opus now generates .vcxproj.filters files alongside the project files to remedy this.

25-Sep-2011 Issue 47. If the Windows SDK (6.0A) is not found, then the VisualStudio install path is searched for a PlatformSDK. This is really only suitable for VisualStudio 8.

20-Sep-2011 Issue 46. Fixing env.bat for Windows to expand the original PATH correctly.

20-Sep-2011 Disabled VisualC browse information generation for all build types. This improves performance of builds. Assuming Intellisense provides most features required if no other VisualStudio addins are used.

17-Sep-2011 Set version to 0.40.

--------------------------------------------------------------------------------

v0.30
=====

15-Sep-2011 Issue 44. Fixing missing spaces in generated Makefiles causing errors.

15-Sep-2011 Issue 43. OSX 64-bit targets with GCC now pass -m64.

13-Sep-2011 Fixing PATH expansion in the Windows environment batch file when there are spaces.

11-Sep-2011 Issue 35. Fixed unexpected exception when using AddRelativeFiles with a leaf name that does not exist.

11-Sep-2011 Output the 'CumulativeTotal' row of the timing table, as an indication if the breakdown of the process differs from the timed total.

11-Sep-2011 Adding the 'host platform' as output to the initial display information (depending on verbosity level) from Opus.

11-Sep-2011 Generalized Gcc detection further using 'gcc -v' and 'gcc -dumpversion' to determine configuration settings.

08-Sep-2011 Adding a Batch file to the root source directory to set up the environment for running Opus.

08-Sep-2011 Gcc's machine type is now determined via a call to 'gcc -dumpmachine' rather than being hard coded.

08-Sep-2011 Adding a Bash shell script to the root source directory to set up the environment for running Opus. Also added an executable script, called 'Opus', copied to the bin directory that can be used to run Opus through Mono.

06-Sep-2011 Adding a test to determine if duplicate package definition schemas are present. This can happen when both Debug and Release builds are present.

06-Sep-2011 WindowsSDK-6.0 package now also checks in the VisualC install path for a 'PlatformSDK' directory, if it cannot find WindowsSDK in the registry.

06-Sep-2011 Opus.Core.RelativePathUtilities.GetPath now unescapes all relative paths. This seems to be necessary for VisualStudio projects with the build root on the same drive as VisualStudio.

06-Sep-2011 Adding -D=<defines> and -U=<undefines> to the command line actions to add per-run definitions and undefinitions to the package compilation step. Undefines are applied after all defines have been accumulated.

05-Sep-2011 Adding AMDAPPSDK-2.5 to the packages root, and OpenCLTest1-dev to the testpackages root. These are Windows only currently.

05-Sep-2011 Opus.Core.Target constructors are now private. Instances can now be requested through Target static factory methods. This allows unique Targets to be created, and used as keys to collection indexing.

04-Sep-2011 Changing -createdebugproject to generate a .csproj targetted to Framework 3.5 so that MonoDevelop can compile it.

04-Sep-2011 Fixing directory structure to the CodeGenTest2-dev test package.

02-Sep-2011 Removed the '-changedependency' option as it is also available through '-dependent=<package> -changeversion=<version>'

02-Sep-2011 Updated many actions to take a semi-colon separated list of arguments. In real use cases, it was becoming time consuming to repeat calls to do the same thing with different arguments, e.g. remove platform filters.

01-Sep-2011 Removed legacy ArgumentProcessor interface and attribute. Replaced all existing uses of this (command switches in plugin packages) with Opus.Core.IAction classes.

31-Aug-2011 OSX Gcc compiler, archiver, and linker fixes. Dynamic libraries are not the same as for other platforms as they can be linked against but not loaded. The latter would require a bundle.

29-Aug-2011 Updated test packages to build under Unix, now that some packages are Windows specific.

26-Aug-2011 Removed OSX and Unix from supported platforms of Windows specific packages.

26-Aug-2011 Removed Windows as a supported platform for Gcc-4.4 and GccCommon-dev packages. Predicated test package scripts that reference Gcc on the supported platforms.

26-Aug-2011 Upgraded the definition files for those packages in the 'testpackages' root.

26-Aug-2011 Upgraded the definition files for those packages in the 'packages' root.

26-Aug-2011 Improved the build timing breakdown and display.

25-Aug-2011 Added QtCommon-dev package to share the common parts of the Qt packages.

25-Aug-2011 VisualC runtime checks are not compatible with managed C++ code.

25-Aug-2011 Fixing VSSolutionBuilder compilation errors when both C and CSharp toolchains are required in a build.

25-Aug-2011 Improved exception message if Opus cannot locate a class in it's module database to add option updates from.

25-Aug-2011 ModuleUtilities.GetModule will now return an IModule if it is a valid base class. This allows for base classes to also add option update delegates.

25-Aug-2011 Changed end of the build from "Build complete" to "Build finished" as complete sounds like success.

24-Aug-2011 Added C compiler option OmitFramePointer.
            Added Gcc and Mingw compiler option InlineFunctions.
            Added VisualC compiler options InlineFunctionExpansion and EnableIntrinsicFunctions.

23-Aug-2011 Fixed testpackage Test-dev to compile in debug with VisualC, and extended to try out AdditionalOptions on all supported compilers.

23-Aug-2011 C archiver, compiler and linker "AdditionalOptions" added, that blindly adds space separated options to the appropriate tool. Use this to add options that the Opus plugin doesn't yet expose.
            VisualC compiler added "BasicRuntimeChecks" and "SmallerTypeConversionRuntimeCheck" options.

23-Aug-2011 C compilation #defines added:
            * D_OPUS_PLATFORM_BITS=<n> where n is 32 or 64.
            * D_OPUS_PLATFORM_LITTLEENDIAN for little endian platforms.
            * D_OPUS_PLATFORM_BIGENDIAN for big endian platforms.

23-Aug-2011 Added OPUS_HOST_<platform> to the script compiler #defines.

23-Aug-2011 Added more options for converting Opus.Core.EPlatform to a string.

21-Aug-2011 Added Opus.Core.State.IsLittleEndian to query the endianness of the host platform. Might be useful on OSX.

21-Aug-2011 Removed old platform detection code. The new code is known to run on all supported platforms.

21-Aug-2011 Removing unnecessary namespace resolution in the Opus code.

21-Aug-2011 Package definition file (.xml in the package folder) schema change and package backend update to support packages of the same name, but different versions, for different platforms.
            New schema specifies dependent packages as before but with conditions, based on platforms; the Opus assemblies required, the system assemblies required, #defines to pass to the package compilation, and supported platforms for the package. The definition file is now a complete description of how to compile the package. Opus has been extended with command line options to act on these additional features.
            Legacy package definition files will be automatically upgraded to the new schema. There may be inaccurate data in there, with the new features.
            New Core class, PackageIdentifier, that is the minimum information needed to resolve package dependencies.
            Package dependencies are resolved early, and will only load the package definition files once.
            Timings are displayed at the end of build actions.
            Command line arguments to Opus are lazily evaluated from left to right (response files are inlined in place), and repeated specification of the same argument will override any existing value.
            Existing package definition files have not been updated to the latest schema in this commit, to illustrate the schema upgrade process in a future commit.
            Some command line arguments have changed. Please check the latest help with 'Opus -help'.

13-May-2011 Set version to 0.30.

--------------------------------------------------------------------------------

v0.20
=====

11-May-2011 Improved code to serialize the package dependency file and package list resource file, used during package compilation.

08-May-2011 Remove hardcoded .csproj extension in the VSSolutionBuilder

08-May-2011 Fixes for QMakeBuilder support for C applications and dynamic libraries when there are no dependent libraries.

08-May-2011 Fixes to Gcc and Mingw C compiler OutputType delegates, following a change that the CObjectFileCollection will now have a null pointer for it's output file.

08-May-2011 Removed VSSolutionBuild ProjectData class, as it has been superceded by the IProject interface.

08-May-2011 MSBuild support in VSSolutionBuilder. This allows native output of VisualStudio 2010 .vcxprojs and C# .csprojs for other versions of VisualStudio. The version of the VisualC package determines the target of C++ projects. The version of the DotNetFramework package determines the target of C# projects.
            Windows Presentation Foundation (WPF) support in C# projects, requiring an AssemblyDefinition and Pages .xaml files (and associated .cs files).
            Improved exception reporting from build scripts, when there is deep nesting of exceptions.
            Package version comparisons improved.
            VisualStudioProcessor delegates now take an additional argument which is the VisualStudio target, either VCPROJ or MSBUILD.
            Renamed VisualCCommon.ERuntimeLibrary.MultiThreadedDLLDebug to MultiThreadedDebugDLL to match the naming convention inside VisualStudio.
            Extended CSharpTest1 test package with an example requiring references.
            Added WPFTest test package, based on the default application VisualStudio 2010 creates.

25-Apr-2011 Possible rewrite of the platform detection code. Hopefully this works on all intended platforms.

25-Apr-2011 The Opus command line tool, if provided a response file, now also accepts additional arguments on the command line. This allows extra commands to be tried out without having to modify the response file. There still can be only one response file.

24-Apr-2011 Module Build functions no longer require passing an Opus.Core.DependencyNode argument, since this is accessible via the module's OwningNode field.

24-Apr-2011 QMake support. Initial support for C/C++ modules and FileUtilities. Generates .pro files that can be loaded into, and built through, QtCreator.

18-Apr-2011 C.Linker.AppendLibrariesToCommandLine adds other libraries into the array rather than turning them into a string.

17-Apr-2011 Do not allow filtered external dependents and required modules to be processed.

17-Apr-2011 Updated CopyFiles code from previous change for the command line builder.

17-Apr-2011 Changed command line builders from using System.String.StringBuilder to Opus.Core.StringArray, so it is easier to identify individual commands (spaces in paths can no longer be confused with separators for commands).

13-Mar-2011 Set version to 0.20.

--------------------------------------------------------------------------------

v0.10
=====

13-Mar-2011 Rename C.ILinkerOptions from IgnoreStandardLibraries property to DoNotAutoIncludeStandardLibraries for clarity.

13-Mar-2011 Set Opus version from 0.1 to 0.10.

13-Mar-2011 Fix typo in DependencyNodeCollection.
            Remove now unused MakeFileData.Included property.

13-Mar-2011 MakeFile update
            MakeFileBuilder now allows adding multiple rules to a MakeFile.
            Added classes MakeFileVariableDictionary and MakeFileTargetDictionary to store intermediate and output Make variables and targets, mapped by type.
            All sub-MakeFiles are now included at the top-level, which reduces issues of multiply-included MakeFiles when there are multiple dependencies.
            C.HeaderLibrary module type supported by MakeFiles.
            Libraries are no longer handled by the OptionCollection mechanism, in order to support GCC --start-group and --end-group bounds. The linker supplies a utility function, AppendLibrariesToCommandLine, to append these properly.
            Top-level MakeFile selectively specifies the targets to append to 'all'.
            Builder PostExecute method only executes over those DependencyNodes that were run by the scheduler, in the order scheduled.
            Package debug projects now include any builder-specific scripts for the top level package.
            Also fixed Native builder duplicate dependent libraries in C.Application, C.DynamicLibrary.
            C.OutputFileFlags also now understands the concept of the ObjectFileCollection.
            C.Toolchain now also exposes the StaticImportLibraryExtension. This is needed for MakeFiles for Unix shared objects.
            FileUtilities.CopyFiles has a cleaner command line exposure.
            CodeGenTest test packages now support MakeFiles.

05-Mar-2011 Gcc requires -m32 to be passed when building a 32-bit application on a 64-bit OS.

01-Mar-2011 Opus.Core.DependencyNode unique module names now use the namespace (package name) to avoid class (module) name collisions.

01-Mar-2011 Add detection code for circular dependencies in external and required dependents.

28-Feb-2011 Following on from the previous fix, allow C.DynamicLibrary to be inherited for GCC builds.

28-Feb-2011 Allow script modules to derive from an abstract module base class. Allow this to work for C.DynamicLibrary modules.

27-Feb-2011 Opus.Core.RequiredModules now really do export the option collections that have the appropriate meta markup.

25-Feb-2011 Updated Opus .csproj and .sln for SharpDevelop 4.0.

20-Feb-2011 Fixes to C.ObjectFileCollection for VisualStudio project generation in the case of there being no source files yet (can happen while starting to create a project).

18-Feb-2011 Issue #33. Fixing dependency checking for C.Application and C.DynamicLibrary in the NativeBuilder that was not checking the timestamps for static and import libraries.

18-Feb-2011 Issue #32. Correctly passing recursive symbols resolution options to the GCC linker, with the -Wl, prefix. This resolves undefined reference errors when libraries are specified in the incorrect order.

17-Feb-2011 Don't catch System.Reflection.TargetInvocationException too soon, or relevant stack trace information is lost upon a rethrow.

15-Feb-2011 Opus.Core.State.BuildRoot no longer uses an incorrect directory separator on Windows. Simplified some plugin code because of this fix.

14-Feb-2011 Opus.Core.DirectoryCollection.Add(string,bool) renamed to AddAbsoluteDirectory.
            Implemented Add and AddRange methods on Opus.Core.DirectoryCollection that accept a module, e.g. this object in an update options instance delegate.

13-Feb-2011 C.HeaderLibrary now includes a Utility vcproj when using the VSSolutionBuilder.

13-Feb-2011 Issue #31. Opus.Core.File.GetFiles no longer recurses into all subdirectories. Wildcarded subdirectories need to be explicitly specified.

13-Feb-2011 VSSolutionBuilder serialization rewrite, which allows sub-filters for files, so that the disk directory hierarchy is maintained in the VisualStudio project.

11-Feb-2011 Opus.Core.ITargetFilters changed so that Platform, Configuration and Toolchains are specified by named properties. Added abstract Opus.Core.BaseTargetFilteredAttribute which each of the filter attributes derives from; these default to filters of any platforms, any configurations and any toolchain. Specific filters can now be set up via optional named arguments in the attributes.

10-Feb-2011 Added support for Unix/Gcc to Test14

10-Feb-2011 Added testpackages/Test14 to exercise a dynamic library linking against another dynamic library.

10-Feb-2011 Issue #30 Default VisualC debug symbols is set to Embedded to avoid compilation errors with multithreaded builds and PDBs.

10-Feb-2011 Each IModule now has an OwningNode property which is it's associated DependencyNode.
            Injected modules inherit the external dependency from the node that generated them. This ensures correct scheduling in multithreaded builds.
            Output paths are now a required feature of classes derived from Opus.Core.BaseOptionCollection, and are able to filter them via a specified enum whose values are bitfields.
            Modules can implement the Opus.Core.IIdentifyExternalDependencies interface in order to identify dependencies at the start of the graph construction phase.
            Modules that are collections of other modules must implement the Opus.Core.IModuleCollection interface. IModule is included in this.
            Opus.Core.Target.IsComplete has been renamed to Opus.Core.Target.IsFullyFormed. If a Target is not fully formed, equivalence only checks the Platform and Configuration properties.
            NativeBuilder Build functions have simplified dependency extraction using the new output path filtering functions.
            MakeFile construction has been overhauled with respect to whether Make variables or Targets are used.
            Added MakeFile generation support for CSharp Assembly modules.
            Added MakeFile generation support for Qt Moc.
            Issue #8 Added FileUtilities package, with a CopyFiles module. This can be used, for example, to copy dependent dynamic libraries to an executable's directory.

04-Feb-2011 Issue #28 The build scheduler was not taking external dependencies and required dependencies into account. In multi threaded builds, this resulted in an incorrect evaluation order of nodes in the graph.

04-Feb-2011 Issue #27. Adding synchronization to the output text dequeue to avoid null reference exceptions in multi threaded builds (I hope).

04-Feb-2011 Issue #26. Additional synchronization is needed in VisualStudio solution builds when using multiple build agents.

03-Feb-2011 Issue #25 Do not use a blocking wait to determine if agents are free.

02-Feb-2011 Makefile dependencies between output files and their parent directories are now ORDER ONLY dependencies, which requires Make 3.80 and above (http://www.gnu.org/software/hello/manual/make/Prerequisite-Types.html) but avoids problems that the directory timestamp changes as files are added to it, which can cause unnecessary rebuilds.

29-Jan-2011 Issue #23. Further fixes to include paths on 64-bit Linux, but this time for g++.

29-Jan-2011 Issue #23. GCC internal include paths are different on 64-bit Linux to 32-bit.

29-Jan-2011 Attempt at fixing OSUtilities detection of 64-bit Linux. Will fail on a 32-bit OS running on a 64-bit processor.

29-Jan-2011 Removed Opus.Core.IOutputPaths. Instead, Opus.Core.BaseOptionCollections has a property to assign new OutputPaths via a dictionary mechanism of a key (to identify different files) and a string (for the pathname of said file). The key must be derived from Opus.Core.FlagsBase, which is a class that simulates a derivable enum of values that are power of 2 (bitfield flags). OptionCollections are now simpler to implement. PostExecutes for builders have also changed to now accept a NodeCollection as the argument to give more context to the data.

29-Jan-2011 Fixed compilation of Mingw-4.5.0 package.

26-Jan-2011 Fixing unused variable warnings compiling Opus in MonoDevelop

23-Jan-2011 Issue #6. Added command line configuration argument to Qt; -Qt.installpath=<path> to override Opus searching for the Qt install directory.

23-Jan-2011 Added Opus.Core.State.RunningMono to detect whether Mono is being used.

23-Jan-2011 Issue #9. Added versioning to package compilation; the define OPUS_CORE_VERSION_MAJOR_MINOR is set in the compiler, where MAJOR and MINOR are the major and minor versions of the Opus.Core.dll assembly. Added new Opus.Core.State functions; Version to get the System.Version and VersionString to get the reduced major/minor string version.

23-Jan-2011 Fields marked as source files to C# assemblies can now be either Opus.Core.File or Opus.Core.FileCollection.

23-Jan-2011 Removed GetNestedDependents from Opus.Core.IModule and added it to its own interface Opus.Core.INestedDependents. Not all modules expect to have nested dependencies, so should not have to implement this function.

22-Jan-2011 Correcting a typo constructing the Windows Qt Moc executable pathname.

22-Jan-2011 Support for detecting Qt on Unix in the default installation location; updated Moc and a test package.

22-Jan-2011 Adding more required Gcc include paths when -nostdinc is used; this is to find headers like limits.h

22-Jan-2011 Fixed adding linker search paths in GCC.

22-Jan-2011 Added Qt-4.6.3 package.

22-Jan-2011 Issue #15. Added the Moc tool to Qt, with NativeBuilder support. Renamed Qt-2010.05 to Qt-4.7.1 as this system only needs the framework libraries, and not the full development SDK (and has VisualC support).

22-Jan-2011 OpusOptionInterfacePropertyGenerator allows for comments at the start of the interface file.

22-Jan-2011 Exceptions thrown at the point of toolchain registration are reported better.

21-Jan-2011 Fixed bad regular expression in CodeGenTest-dev test package. This stopped the WindowsSDK from being added as a dependency.

21-Jan-2011 Issue #21. Module injections did not work for module collections.

20-Jan-2011 Issue #18. The API for setting relative paths has been made more robust, but with the consequence that some file specifications have moved out of field initializers to class constructors.

20-Jan-2011 Opus.Core.DependencyNodeEnumerator no longer throws an exception when the DependencyGraph is empty.

19-Jan-2011 Adding Changelog.txt

18-Jan-2011 When searching for script files, use a recursive directory search.

18-Jan-2011 Fixed debug message typo; should be platform, not configuration.

--------------------------------------------------------------------------------

v0.00
=====
First version
