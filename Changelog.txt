15-Oct-2015 Changed C.ICommonLinkerSettings.LibraryPaths from Bam.Core.Array<Bam.Core.TokenizedString> to Bam.Core.TokenizedStringArray.

15-Oct-2015 Changed GccCommon.ICommonLinkerSettings.RPath from Bam.Core.StringArray to Bam.Core.TokenizedStringArray.

15-Oct-2015 Added TokenizedStringArray Add and AddUnique functions that take string arguments - these are converted to verbatim TokenizedStrings.

14-Oct-2015 Debuggable project files are now <modulename>-bam.csproj, to distinguish between those generated for the VSSolution build mode.

14-Oct-2015 Added Publisher.Collation.ChangeRPath utility function, that will alter the RPath for a copied (ELF) file to that path specified. This is so that published files, e.g. plugins, can locate shared objects wherever they may get published to.

14-Oct-2015 Each package representing a build mode (e.g. NativeBuilder) has a class for metadata (named <buildmode>Meta). This must now implement a new interface, Bam.Core.IBuildModeMetaData, which requires a function to return the module output directory TokenizedString used for each module. This allows different build modes to write to different locations under the build root, should their use require it. Most have a module output directory of 'encapsulating module name'/'configuration'.

13-Oct-2015 Added Bam.Core.MacroList.Remove(), with an argument with no token markup. Use this function cautiously, as it can cause TokenizedStrings to fail to parse.

13-Oct-2015 Bam.Core.MacroList.Contains now expects the argument to have no token markup (i.e. no $( prefix and no ) suffix). Note that this is because the macros are internally stored in a format for fast lookups for TokenizedStrings.

13-Oct-2015 Fixes #3. Added macros to C.CModule, MajorVersion (defaults to "1") and MinorVersion (defaults to "0"), but can be overridden in Module's Init functions. Some platforms support writing this data natively into the generated binaries, or including into the filenames.

13-Oct-2015 Bam.Core.TokenizedString.Create now accepts an optional flags parameter. One of these flags is EFlags.DeferredExpansion, which allows macro expansion to be deferred for one level. For example, if a Tool uses a Macro, which is defined in the Module using the tool, this now expands properly.

10-Oct-2015 Added short version of option --createdebugproject, -p.

10-Oct-2015 Renamed FileKey from Publisher.Collation.PackageRoot to Publisher.Collation.PublishingRoot.

09-Oct-2015 Fixes #1. Added function to publish OSX frameworks, IncludeFramework. This requires that the module to be published derives from C.ExternalFramework, and implements the properties indicating which files, directories and symbolic links need to be published from that framework.

09-Oct-2015 Fixes #28. Added support for publishing symbolic links.

08-Oct-2015 Added Bam.Core.MacroList.AddVerbatim.

08-Oct-2015 Fixes #26. Added command line option, --stats, which displays memory, object count, and timing information at the end of a build.

07-Oct-2015 Removed verbatim optional argument to Bam.Core.TokenizedString.Create. Use CreateVerbatim instead.

07-Oct-2015 Added Bam.Core.TokenizedString.CreateVerbatim utility function, for strings that require no parsing.

07-Oct-2015 Fixes #25. Nested function calls in TokenizedStrings are now supported.

07-Oct-2015 Bam.Core.TokenizedString now understands the @normalize(<path>) function, returning the full normalized path of the argument.

06-Oct-2015 Fixes #24. Added function to publish whole directories, IncludeDirectory() on the Collation object.

06-Oct-2015 Fixes #23. Fixed the regular expression tokenizing a string for functions, when multiple functions are present.

06-Oct-2015 Bam.Core.TokenizedString.Create will return null if the format string passed in is null. To create an empty tokenized string, use string.Empty, or Bam.Core.Module.MakePlaceholderPath.

06-Oct-2015 Bam.Core.TokenizedString now understands the @dir(<path>) function, returning the parent directory of the argument.

06-Oct-2015 C.ObjectFile no longer defines an inputpath macro, for interaction with the corresponding source file. Instead, the source file's TokenizedString path is referenced directly, via positional tokens.

06-Oct-2015 Bam.Core.Module now has a utility function to create TokenizedStrings that reference macros in that module, CreateTokenizedString. Also, a new function, MakePlaceholderPath(), which is a TokenizedString on the module intended for replacement at a later time (e.g. create a module empty, then set the source path). This is so that other modules can reference this placeholder before the path is set.

06-Oct-2015 Fixes #22. TokenizedString creation now accepts an optional list of TokenizedStrings. This is to allow references to strings other than those in macro lists, e.g. source/output paths of modules. These are referred to as positional tokens, and may be referenced by a zero-based numeric index as a token (usual token notation), e.g. "$(0)" refers to the first string in that list.

03-Oct-2015 Fixes #21. Each file published is now a separate module, which enables both parallelism and that tools can be assigned to each published object.

03-Oct-2015 Running command line tools no longer leaves the standard input stream open. This avoids tools that request user input from indefinitely pausing the build - instead they will fail because there will never be any input.

03-Oct-2015 Fixes #20. Exceptions thrown during a threaded build are now displayed with full details and stack trace to the user.

03-Oct-2015 Fixes #19. Bam executed with -d/--debug did not use debug symbols in Mono.

02-Oct-2015 Added VisualCCommon.IRuntimeLibraryPathMeta interface, implemented by VisualC.MetaData class, to return the paths for the C and C++ runtime libraries for the version of VisualC. 32 or 64-bit versions are requested by the argument to the interface functions, MSVCR (C runtime) and MSVCP (C++ runtime).

02-Oct-2015 Fixes #18. Added Publisher.Collation.IncludeFile function(s), so that files not associated with modules can be published.

02-Oct-2015 Added Bam.Core.TokenizedString.ParseAndQuoteIfNecessary. If the parsed string contains a space, the returned string from this function is wrapped in (double) quotes. Otherwise, the parsed string is returned.

02-Oct-2015 Fixes #15. Environment variables can now be used in TokenizedStrings. For example, a tokenized string can be "$(HOME)" to get the HOME environment variable.

02-Oct-2015 Fixes #16. VisualC builds in Native build mode no longer default to statically linking the CRT, which was different to VSSolution build modes (dynamically linking the CRT). The default is now to dynamically link (to reduce binary size) against the non-debug CRT. This can be changed on the VisualCCommon.ICommonCompilerSettings.RuntimeLibrary property.

25-Sep-2015 ======== Version 1.0a4 Release ========

25-Sep-2015 Fixes #12. To compiler, archiver and linker settings, added a new interface C.IAdditionalSettings, which allows a back door to setting arbitrary tool options, in the event of an existing interface not exposing the necessary property. This simply avoids having to modify packages to add a command line switch. VisualStudio and Xcode support provided. But note that Xcode does not expose any visible custom archiver setting.

25-Sep-2015 Fixes #11. C.ConsoleApplication and C.GuiApplication and C.DynamicLibrary allowed the creation of C++ source containers through class methods. These methods have been moved to the equivalent C.Cxx module types.

24-Sep-2015 Fixes #10. Do not assume that gcc, g++, ar, and ld, all reside on the same path. For instance, Gcc-4.8 on CentOS 6 is installed to /opt/rh/devtoolset-2, while ar and ld reside in /usr/bin.

23-Sep-2015 Fixes #9. Each conversion package (CommandLineProcessor, VisualStudioProcessor, XcodeProjectProcessor) now uses Bam.Core.Settings.Interfaces(), and reflection, to invoke each settings interface on a Settings object. Fetching the interfaces through reflection does not guarantee an order, so the precedence of interfaces are queried through Bam.Core.SettingsPrecedenceAttribute. C.ICommonArchiverSettings has a very negative precedence, as some librarians (ar) require the output file to be specified as the last argument before all input files.

23-Sep-2015 Issue #9. Added Bam.Core.SettingsPrecedenceAttribute, applicable to interfaces, that takes an integer value to define an order of evaluation. This is in respect of Settings interfaces (implement Bam.Core.ISettingsBase). By default, precedence is zero. A more negative value indicates that the interface is processed later, while a more positive value indicates that the interface is processed earlier.

23-Sep-2015 Issue #9. Added Bam.Core.Settings.Interfaces() that returns an IEnumerable returning the interfaces on the Settings object.

21-Sep-2015 ======== Version 1.0a3 Release ========

21-Sep-2015 Fixes #8. PATH is now searched for gcc, and versions checked, rather than assuming installation directories, and naming conventions.

21-Sep-2015 Check whether a C source directory exists before enumerating it for files.

21-Sep-2015 Fixes #6. Wrapped Module creation in a try catch, which will throw a new exception type, Bam.Core.ModuleCreationException, capturing the module type in the inner most module creation call, so that accurate module information can be provided when reporting the error.

21-Sep-2015 First check whether a package repository exists before enumerating it for packages.

21-Sep-2015 Fixes #7. Unhandled exceptions fell through the bam executable. Now catch and report them, for a cleaner exit.

19-Sep-2015 Fixes #2. The Bam test harness can now specify other package repositories to test, as well as the default in Bam. There is a requirement of a bamtests.py in the tests folder of each repository, naming each valid Test, and the build modes in which it can be run.

18-Sep-2015 bam --version now reports the directory containing the Bam core assembly.

18-Sep-2015 Dependent package definition files did not add their package repositories into the search paths, in order to resolve all packages they reference.

18-Sep-2015 ======== Version 1.0a2 Release ========

18-Sep-2015 C.ConsoleApplication.RequiredToExist<T> now accepts a comma separated list of modules to apply public patches of T to. This is used, for instance, for plugins that do not need to be linked against an application, but do expose a header to compile against.

18-Sep-2015 Public patches on a module are now inherited by all modules that reside within it. For example, a C static library has a public patch to provide an include path; all source containers within that static library automatically use that patch.

17-Sep-2015 ======== Version 1.0a1 Release ========

16-Sep-2015 Next target version set to 1.0.
