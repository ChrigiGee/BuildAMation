// <copyright file="PostExecute.cs" company="Mark Final">
//  Opus package
// </copyright>
// <summary>QMakeBuilder package</summary>
// <author>Mark Final</author>
namespace QMakeBuilder
{
    public sealed partial class QMakeBuilder
    {
        public void PostExecute(Opus.Core.DependencyNodeCollection nodeCollection)
        {
            Opus.Core.Log.DebugMessage("PostExecute for QMakeBuilder");

            Opus.Core.PackageInformation mainPackage = Opus.Core.State.PackageInfo[0];
            string fileName = System.String.Format("{0}.pro", mainPackage.FullName);
            string rootDirectory = mainPackage.BuildDirectory;
            string topProPathName = System.IO.Path.Combine(rootDirectory, fileName);
            rootDirectory += System.IO.Path.DirectorySeparatorChar;
            // generating relative directories does not seem to work if the paths end in a separator... a file seems to be needed
            if (Opus.Core.State.RunningMono)
            {
                rootDirectory += "monoFix";
            }

            using (System.IO.TextWriter proWriter = new System.IO.StreamWriter(topProPathName))
            {
                proWriter.WriteLine("# -- Generated by Opus --");
                proWriter.WriteLine("TEMPLATE = subdirs");
                proWriter.WriteLine("CONFIG += ordered");
                proWriter.WriteLine("SUBDIRS += \\");

                foreach (Opus.Core.DependencyNode node in nodeCollection)
                {
                    NodeData data = node.Data as NodeData;
                    if ((null != data) && (null != data.ProFilePathName))
                    {
                        string subDirProjectDir = System.IO.Path.GetDirectoryName(data.ProFilePathName) + System.IO.Path.DirectorySeparatorChar;
                        string relativeDir = Opus.Core.RelativePathUtilities.GetPath(subDirProjectDir, rootDirectory);
                        relativeDir = relativeDir.TrimEnd(System.IO.Path.DirectorySeparatorChar);
                        proWriter.WriteLine("\t{0}\\", relativeDir.Replace('\\', '/'));
                    }
                }
            }
        }
    }
}