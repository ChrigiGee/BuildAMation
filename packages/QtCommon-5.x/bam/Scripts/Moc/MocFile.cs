#region License
// Copyright (c) 2010-2015, Mark Final
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of BuildAMation nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion // License
namespace QtCommon
{
    public class ExportMocOptionsDelegateAttribute :
        System.Attribute
    {}

    public class LocalMocOptionsDelegateAttribute :
        System.Attribute
    {}

    /// <summary>
    /// Create meta data from a C++ header or source file
    /// </summary>
    [Bam.Core.ModuleToolAssignment(typeof(IMocTool))]
    public class MocFile :
        Bam.Core.BaseModule,
        Bam.Core.IInjectModules
    {
        public static readonly Bam.Core.LocationKey OutputFile = new Bam.Core.LocationKey("MocdSourceFile", Bam.Core.ScaffoldLocation.ETypeHint.File);
        public static readonly Bam.Core.LocationKey OutputDir = new Bam.Core.LocationKey("MocdSourceDir", Bam.Core.ScaffoldLocation.ETypeHint.Directory);

        public static string Prefix
        {
            get
            {
                return "moc_";
            }
        }

        public void
        Include(
            Bam.Core.Location baseLocation,
            string pattern)
        {
            this.SourceFileLocation = new Bam.Core.ScaffoldLocation(baseLocation, pattern, Bam.Core.ScaffoldLocation.ETypeHint.File, Bam.Core.Location.EExists.Exists);
        }

        public Bam.Core.Location SourceFileLocation
        {
            get;
            set;
        }

        /// <summary>
        /// Module class for the compiled source, originally generated by moc. Identical to the C++ object file but with extra meta data.
        /// </summary>
        public class MocObjectFile :
            C.Cxx.ObjectFile,
            Bam.Core.IIsGeneratedSource
        {
            #region IIsGeneratedSource Members

            bool Bam.Core.IIsGeneratedSource.AutomaticallyHandledByBuilder(Bam.Core.Target target)
            {
                var isUsingQMake = (Bam.Core.State.BuildMode == "QMake");
                return isUsingQMake;
            }

            #endregion
        }

        #region IInjectModules Members

        string
        Bam.Core.IInjectModules.GetInjectedModuleNameSuffix(
            Bam.Core.BaseTarget baseTarget)
        {
            return "Qt5MocSourceFile";
        }

        System.Type
        Bam.Core.IInjectModules.GetInjectedModuleType(
            Bam.Core.BaseTarget baseTarget)
        {
            return typeof(MocObjectFile);
        }

        Bam.Core.DependencyNode
        Bam.Core.IInjectModules.GetInjectedParentNode(
            Bam.Core.DependencyNode node)
        {
            var dependentFor = node.ExternalDependentFor;
            var firstDependentFor = dependentFor[0];
            return firstDependentFor;
        }

        void
        Bam.Core.IInjectModules.ModuleCreationFixup(
            Bam.Core.DependencyNode created,
            Bam.Core.DependencyNode owner)
        {
            // associate the location of the generated file, with that of the output file
            // that caused the injection event
            var sourceFile = new Bam.Core.ScaffoldLocation(Bam.Core.ScaffoldLocation.ETypeHint.File);
            sourceFile.SetReference(owner.Module.Locations[OutputFile]);

            var createdModule = created.Module as MocObjectFile;
            createdModule.SourceFileLocation = sourceFile;
        }

        #endregion
    }
}
