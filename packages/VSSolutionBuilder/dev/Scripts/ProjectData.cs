// <copyright file="ProjectData.cs" company="Mark Final">
//  Opus package
// </copyright>
// <summary>VSSolutionBuilder package</summary>
// <author>Mark Final</author>
namespace VSSolutionBuilder
{
    public sealed class ProjectData
    {
        public ProjectData(string name, string pathName, string packageDir)
        {
            this.Name = name;
            this.PathName = pathName;
            this.Guid = System.Guid.NewGuid();
            this.Configurations = new ProjectConfigurationCollection();
            this.SourceFiles = new ProjectFileCollection();
            this.HeaderFiles = new ProjectFileCollection();
            this.Platforms = new System.Collections.Generic.List<string>();
            this.DependentProjects = new System.Collections.Generic.List<ProjectData>();

            if (packageDir[packageDir.Length - 1] == System.IO.Path.DirectorySeparatorChar)
            {
                this.PackageUri = new System.Uri(packageDir, System.UriKind.Absolute);
            }
            else
            {
                this.PackageUri = new System.Uri(packageDir + System.IO.Path.DirectorySeparatorChar, System.UriKind.Absolute);
            }

            this.XmlDocument = new System.Xml.XmlDocument();
        }

        public string Name
        {
            get;
            private set;
        }

        public string PathName
        {
            get;
            private set;
        }

        public System.Guid Guid
        {
            get;
            private set;
        }

        public ProjectFileCollection SourceFiles
        {
            get;
            private set;
        }

        public ProjectFileCollection HeaderFiles
        {
            get;
            private set;
        }

        public ProjectConfigurationCollection Configurations
        {
            get;
            private set;
        }

        public System.Collections.Generic.List<string> Platforms
        {
            get;
            private set;
        }

        public System.Collections.Generic.List<ProjectData> DependentProjects
        {
            get;
            private set;
        }

        private System.Uri PackageUri
        {
            get;
            set;
        }

        private System.Xml.XmlDocument XmlDocument
        {
            get;
            set;
        }

        public void Serialize()
        {
            try
            {
                System.Uri projectLocationUri = new System.Uri(this.PathName, System.UriKind.RelativeOrAbsolute);

                System.Xml.XmlDocument document = this.XmlDocument;

                document.AppendChild(document.CreateComment("Automatically generated by Opus v" + Opus.Core.State.OpusVersionString));
                System.Xml.XmlElement vsProjectElement = document.CreateElement("VisualStudioProject");

                // preamble
                vsProjectElement.SetAttribute("ProjectType", "Visual C++");
                vsProjectElement.SetAttribute("Version", VisualC.Project.Version);
                vsProjectElement.SetAttribute("Name", this.Name);
                vsProjectElement.SetAttribute("ProjectGUID", this.Guid.ToString("B").ToUpper());

                // platforms
                System.Xml.XmlElement platformsElement = document.CreateElement("Platforms");
                foreach (string platform in this.Platforms)
                {
                    System.Xml.XmlElement platformElement = document.CreateElement("Platform");
                    platformElement.SetAttribute("Name", platform);
                    platformsElement.AppendChild(platformElement);
                }
                vsProjectElement.AppendChild(platformsElement);

                // tool files
                // TODO

                // configurations
                System.Xml.XmlElement configurationsElement = document.CreateElement("Configurations");
                foreach (ProjectConfiguration configuration in this.Configurations)
                {
                    configurationsElement.AppendChild(configuration.Serialize(document, projectLocationUri));
                }
                vsProjectElement.AppendChild(configurationsElement);

                // files
                System.Xml.XmlElement filesElement = document.CreateElement("Files");
                if (this.SourceFiles.Count > 0)
                {
                    filesElement.AppendChild(this.SourceFiles.Serialize(document, "Source Files", projectLocationUri, this.PackageUri));
                }

                if (this.HeaderFiles.Count > 0)
                {
                    filesElement.AppendChild(this.HeaderFiles.Serialize(document, "Header Files", projectLocationUri, this.PackageUri));
                }
                vsProjectElement.AppendChild(filesElement);

                document.AppendChild(vsProjectElement);
            }
            catch (Opus.Core.Exception exception)
            {
                string message = System.String.Format("Xml construction error from project '{0}'", this.PathName);
                throw new Opus.Core.Exception(message, exception);
            }

            // write XML to disk
            System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(this.PathName));

            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.CloseOutput = true;
            xmlWriterSettings.OmitXmlDeclaration = false;
            xmlWriterSettings.NewLineOnAttributes = true;

            try
            {
                using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(this.PathName, xmlWriterSettings))
                {
                    this.XmlDocument.Save(xmlWriter);
                }
            }
            catch (Opus.Core.Exception exception)
            {
                string message = System.String.Format("Serialization error from project '{0}'", this.PathName);
                throw new Opus.Core.Exception(message, exception);
            }
        }
    }
}