// Automatically generated by Opus v0.00
namespace CSharpTest1
{
    // Define module classes here
    class SimpleLibrary : CSharp.Library
    {
        public SimpleLibrary()
        {
            var sourceDir = this.PackageLocation.SubDirectory("source");
            this.source.Include(sourceDir, "simpletest.cs");
        }

        [Opus.Core.SourceFiles]
        Opus.Core.FileCollection source = new Opus.Core.FileCollection();
    }

    class SimpleExecutable : CSharp.Executable
    {
        public SimpleExecutable()
        {
            var sourceDir = this.PackageLocation.SubDirectory("source");
            this.source = Opus.Core.FileLocation.Get(sourceDir, "simpleexecutable.cs");
        }

        [Opus.Core.SourceFiles]
        Opus.Core.Location source;
    }

    class SimpleWindowExecutable : CSharp.WindowsExecutable
    {
        public SimpleWindowExecutable()
        {
            var sourceDir = this.PackageLocation.SubDirectory("source");
            this.source = Opus.Core.FileLocation.Get(sourceDir, "simplewindowsexecutable.cs");
        }

        [Opus.Core.SourceFiles]
        Opus.Core.Location source;
    }

    class SimpleModule : CSharp.Module
    {
        public SimpleModule()
        {
            var sourceDir = this.PackageLocation.SubDirectory("source");
            this.source = Opus.Core.FileLocation.Get(sourceDir, "simplemodule.cs");
        }

        [Opus.Core.SourceFiles]
        Opus.Core.Location source;
    }

    class Executable2 : CSharp.Executable
    {
        public Executable2()
        {
            var sourceDir = this.PackageLocation.SubDirectory("source");
            this.source = Opus.Core.FileLocation.Get(sourceDir, "executable2.cs");
        }

        [Opus.Core.SourceFiles]
        Opus.Core.Location source;

        [Opus.Core.DependentModules]
        Opus.Core.TypeArray dependents = new Opus.Core.TypeArray(typeof(SimpleLibrary));
    }

#if false
    // TODO: rewrite for publishing
#if OPUSPACKAGE_FILEUTILITIES_DEV
    class PublishAssembliesForExecutable2 : FileUtilities.CopyFile
    {
        public PublishAssembliesForExecutable2()
        {
            this.Set(typeof(SimpleLibrary), CSharp.Assembly.OutputFile);
        }

        [FileUtilities.BesideModule(CSharp.OutputFileFlags.AssemblyFile)]
        System.Type nextTo = typeof(Executable2);
    }
#elif OPUSPACKAGE_FILEUTILITIES_1_0
    class PublishAssembliesForExecutable2 : FileUtilities.CopyFiles
    {
        [FileUtilities.SourceModules(CSharp.OutputFileFlags.AssemblyFile)]
        Opus.Core.TypeArray sourceTargets = new Opus.Core.TypeArray(typeof(SimpleLibrary));

        [FileUtilities.DestinationModuleDirectory(CSharp.OutputFileFlags.AssemblyFile)]
        Opus.Core.TypeArray destinationTarget = new Opus.Core.TypeArray(typeof(Executable2));
    }
#else
#error No such FileUtilities package
#endif
#endif

    class ExecutableReferences : CSharp.Executable
    {
        public ExecutableReferences()
        {
            var sourceDir = this.PackageLocation.SubDirectory("source");
            this.source = Opus.Core.FileLocation.Get(sourceDir, "executablexml.cs");

            this.UpdateOptions += new Opus.Core.UpdateOptionCollectionDelegate(ExecutableReferences_UpdateOptions);
        }

        void ExecutableReferences_UpdateOptions(Opus.Core.IModule module, Opus.Core.Target target)
        {
            var options = module.Options as CSharp.IOptions;
            options.References.Add("System.Xml.dll");
        }

        [Opus.Core.SourceFiles]
        Opus.Core.Location source;
    }
}
