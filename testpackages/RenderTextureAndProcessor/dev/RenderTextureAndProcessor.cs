// Automatically generated by Opus v0.00
namespace RenderTextureAndProcessor
{
    // Define module classes here
    class RenderTexture : C.WindowsApplication
    {
        class SourceFiles : C.CPlusPlus.ObjectFileCollection
        {
            public SourceFiles()
            {
                this.AddUsingWildcards("source", "common", "*.cpp");
                this.AddUsingWildcards("source", "rendertexture", "*.cpp");
                this.UpdateOptions += new Opus.Core.UpdateOptionCollectionDelegate(SourceFiles_UpdateOptions);
            }

            void SourceFiles_UpdateOptions(Opus.Core.IModule module, Opus.Core.Target target)
            {
                {
                    C.ICPlusPlusCompilerOptions options = module.Options as C.ICPlusPlusCompilerOptions;
                    options.ExceptionHandler = C.CPlusPlus.EExceptionHandler.Synchronous;
                }

                {
                    C.ICCompilerOptions options = module.Options as C.ICCompilerOptions;
                    options.IncludePaths.Add(Opus.Core.State.PackageInfo["RenderTextureAndProcessor"], @"source/common");
                }
            }
        }

        [Opus.Core.SourceFiles]
        SourceFiles sourceFiles = new SourceFiles();

        [C.HeaderFiles]
        Opus.Core.FileCollection headerFiles = new Opus.Core.FileCollection(
            Opus.Core.FileCollection.AddUsingWildcards(Opus.Core.State.PackageInfo["RenderTextureAndProcessor"], "source", "common", "*.h"),
            Opus.Core.FileCollection.AddUsingWildcards(Opus.Core.State.PackageInfo["RenderTextureAndProcessor"], "source", "rendertexture", "*.h")
        );

        [C.RequiredLibraries("win32-.*-visualc")]
        Opus.Core.StringArray requiredLibrariesVC = new Opus.Core.StringArray(
            "KERNEL32.lib",
            "GDI32.lib",
            "USER32.lib",
            "OPENGL32.lib",
            "WS2_32.lib",
            "SHELL32.lib"
        );

        [C.RequiredLibraries("win32-.*-mingw")]
        Opus.Core.StringArray requiredLibrariesMingw = new Opus.Core.StringArray(
            "-lws2_32",
            "-lopengl32",
            "-lgdi32"
        );

        [Opus.Core.DependentModules("win32-.*-visualc")]
        Opus.Core.TypeArray dependentModules = new Opus.Core.TypeArray(
            typeof(WindowsSDK.WindowsSDK),
            typeof(OpenGLSDK.OpenGL)
        );

#if true
        [Opus.Core.RequiredModules]
        Opus.Core.TypeArray requiredModules = new Opus.Core.TypeArray(
            typeof(TextureProcessor)
        );
#else
        [Opus.Core.RequiredModules]
        Opus.Core.TargetNameTypeArray requiredModules = new Opus.Core.TargetNameTypeArray(
            new Opus.Core.TargetNameType("%1-optimized-%3", typeof(TextureProcessor))
        );
#endif
    }

    class TextureProcessor : C.Application
    {
        class SourceFiles : C.CPlusPlus.ObjectFileCollection
        {
            public SourceFiles()
            {
                this.AddUsingWildcards("source", "common", "*.cpp");
                this.AddUsingWildcards("source", "textureprocessor", "*.cpp");
                this.UpdateOptions += new Opus.Core.UpdateOptionCollectionDelegate(SourceFiles_UpdateOptions);
            }

            void SourceFiles_UpdateOptions(Opus.Core.IModule module, Opus.Core.Target target)
            {
                {
                    C.ICPlusPlusCompilerOptions options = module.Options as C.ICPlusPlusCompilerOptions;
                    options.ExceptionHandler = C.CPlusPlus.EExceptionHandler.Synchronous;
                }

                {
                    C.ICCompilerOptions options = module.Options as C.ICCompilerOptions;
                    options.IncludePaths.Add(Opus.Core.State.PackageInfo["RenderTextureAndProcessor"], @"source/common");
                }
            }
        }

        [C.RequiredLibraries("win32-.*-visualc")]
        Opus.Core.StringArray requiredLibrariesVC = new Opus.Core.StringArray(
            "KERNEL32.lib",
            "WS2_32.lib"
        );

        [C.RequiredLibraries("win32-.*-mingw")]
        Opus.Core.StringArray requiredLibrariesMingw = new Opus.Core.StringArray(
            "-lws2_32"
        );

        [Opus.Core.SourceFiles]
        SourceFiles sourceFiles = new SourceFiles();

        [C.HeaderFiles]
        Opus.Core.FileCollection headerFiles = new Opus.Core.FileCollection(
            Opus.Core.FileCollection.AddUsingWildcards(Opus.Core.State.PackageInfo["RenderTextureAndProcessor"], "source", "common", "*.h"),
            Opus.Core.FileCollection.AddUsingWildcards(Opus.Core.State.PackageInfo["RenderTextureAndProcessor"], "source", "textureprocessor", "*.h")
        );

        [Opus.Core.DependentModules("win.*-.*-visualc")]
        Opus.Core.TypeArray dependentModules = new Opus.Core.TypeArray(
            typeof(WindowsSDK.WindowsSDK)
        );
    }
}