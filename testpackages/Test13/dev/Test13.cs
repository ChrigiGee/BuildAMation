// Automatically generated by Opus v0.00
namespace Test13
{
    class QtApplication : C.Application
    {
        public QtApplication(Opus.Core.Target target)
        {
            this.UpdateOptions += delegate(Opus.Core.IModule module, Opus.Core.Target delTarget) {
                var gccLink = module.Options as GccCommon.ILinkerOptions;
                if (null != gccLink)
                {
                    gccLink.CanUseOrigin = true;
                    gccLink.RPath.Add("$ORIGIN");
                }
            };
        }

        [Opus.Core.ModuleTargets(Platform=Opus.Core.EPlatform.Windows)]
        class Win32ResourceFile : C.Win32Resource
        {
            public Win32ResourceFile()
            {
                var resourcesDir = this.PackageLocation.SubDirectory("resources");
                this.Include(resourcesDir, "QtApplication.rc");
            }
        }

        class SourceFiles : C.Cxx.ObjectFileCollection
        {
            public SourceFiles()
            {
                var sourceDir = this.PackageLocation.SubDirectory("source");
                this.Include(sourceDir, "*.cpp");

                this.UpdateOptions += new Opus.Core.UpdateOptionCollectionDelegate(SourceFiles_UpdateOptions);
            }

            void SourceFiles_UpdateOptions(Opus.Core.IModule module, Opus.Core.Target target)
            {
                if (module.Options is MingwCommon.ICCompilerOptions)
                {
                    (module.Options as MingwCommon.ICCompilerOptions).Pedantic = false;
                }
                else if (module.Options is GccCommon.ICCompilerOptions)
                {
                    (module.Options as GccCommon.ICCompilerOptions).Pedantic = false;
                }
            }

#if false
            class MyMocFile : QtCommon.MocFile
            {
                public MyMocFile()
                {
                    var sourceDir = this.PackageLocation.SubDirectory("source");
                    this.Include(sourceDir, "myobject.h");
                }
            }

            [Opus.Core.DependentModules]
            Opus.Core.TypeArray dependents = new Opus.Core.TypeArray(typeof(SourceFiles.MyMocFile));
#else
            class MyMocFiles : QtCommon.MocFileCollection
            {
                public MyMocFiles()
                {
                    var sourceDir = this.PackageLocation.SubDirectory("source");
                    this.Include(sourceDir, "*.h");

                    this.RegisterUpdateOptions(new Opus.Core.UpdateOptionCollectionDelegateArray(mocFile_UpdateOptions),
                                               sourceDir,
                                               "myobject2.h");
                }

                void mocFile_UpdateOptions(Opus.Core.IModule module, Opus.Core.Target target)
                {
                    var options = module.Options as QtCommon.IMocOptions;
                    if (null != options)
                    {
                        options.Defines.Add("CUSTOM_MOC_DEFINE_FOR_MYOBJECTS2");
                    }
                }
            }

            [Opus.Core.DependentModules]
            Opus.Core.TypeArray dependents = new Opus.Core.TypeArray(typeof(SourceFiles.MyMocFiles));
#endif
        }

        [Opus.Core.SourceFiles]
        SourceFiles sourceFiles = new SourceFiles();

        [Opus.Core.DependentModules]
        Opus.Core.TypeArray dependents = new Opus.Core.TypeArray(
            typeof(Qt.Core),
            typeof(Qt.Gui)
            );

        [Opus.Core.DependentModules(Platform = Opus.Core.EPlatform.Windows, ToolsetTypes = new[] { typeof(VisualC.Toolset) })]
        Opus.Core.TypeArray winVCDependents = new Opus.Core.TypeArray(typeof(WindowsSDK.WindowsSDK));

        [C.RequiredLibraries(Platform = Opus.Core.EPlatform.Windows, ToolsetTypes = new[] { typeof(VisualC.Toolset) })]
        Opus.Core.StringArray winVCLibraries = new Opus.Core.StringArray("KERNEL32.lib");

        [Opus.Core.DependentModules(Platform = Opus.Core.EPlatform.Windows)]
        Opus.Core.TypeArray resourceFiles = new Opus.Core.TypeArray(
            typeof(Win32ResourceFile)
            );

#if OPUSPACKAGE_PUBLISHER_DEV
        [Publisher.CopyFileLocations]
        protected Opus.Core.Array<Publisher.PublishDependency> publishKeys = new Opus.Core.Array<Publisher.PublishDependency>(
            new Publisher.PublishDependency(C.Application.OutputFile));
#endif
    }

    [Opus.Core.ModuleTargets(Platform=Opus.Core.EPlatform.OSX)]
    class AppInfoPList : XmlUtilities.OSXPlistModule
    {
        public AppInfoPList()
        {
            this.UpdateOptions += delegate(Opus.Core.IModule module, Opus.Core.Target target) {
                var options = module.Options as XmlUtilities.IOSXPlistOptions;
                options.CFBundleName = "QtApplication";
                options.CFBundleDisplayName = "QtApplication";
                options.CFBundleIdentifier = "QtApplication";
                options.CFBundleVersion = "1.0.0";
            };
        }

        [Opus.Core.DependentModules]
        Opus.Core.TypeArray dependents = new Opus.Core.TypeArray(
            typeof(QtApplication)
        );
    }

#if OPUSPACKAGE_PUBLISHER_DEV
    class Publish : Publisher.ProductModule
    {
        public Publish()
        {
            this.UpdateOptions += delegate(Opus.Core.IModule module, Opus.Core.Target target)
            {
                var options = module.Options as Publisher.IPublishOptions;
                if (null != options)
                {
                    options.OSXApplicationBundle = true;
                }
            };
        }

        [Publisher.PrimaryTarget]
        System.Type primary = typeof(QtApplication);

        [Publisher.OSXInfoPList]
        Publisher.NamedModuleLocation plist = new Publisher.NamedModuleLocation(typeof(AppInfoPList), XmlUtilities.OSXPlistModule.OutputFile);
    }
#else
#if OPUSPACKAGE_FILEUTILITIES_DEV
    [Opus.Core.ModuleTargets(Platform=Opus.Core.EPlatform.Windows | Opus.Core.EPlatform.Unix)]
    class PublishDynamicLibraries : FileUtilities.CopyFileCollection
    {
        public PublishDynamicLibraries(Opus.Core.Target target)
        {
            this.Include(target,
                         C.OutputFileFlags.Executable,
                         typeof(Qt.Core),
                         typeof(Qt.Gui));
        }

        [FileUtilities.BesideModule(C.OutputFileFlags.Executable)]
        System.Type nextTo = typeof(QtApplication);
    }
#elif OPUSPACKAGE_FILEUTILITIES_1_0
    class PublishDynamicLibraries : FileUtilities.CopyFiles
    {
        public PublishDynamicLibraries(Opus.Core.Target target)
        {
            this.UpdateOptions += new Opus.Core.UpdateOptionCollectionDelegate(PublishDynamicLibraries_UpdateOptions);
        }

        void PublishDynamicLibraries_UpdateOptions(Opus.Core.IModule module, Opus.Core.Target target)
        {
            Qt.Qt thirdPartyModule =
                Opus.Core.ModuleUtilities.GetModuleNoToolchain(typeof(Qt.Qt), target) as Qt.Qt;
            if (null == thirdPartyModule)
            {
                throw new Opus.Core.Exception("Cannot locate Qt module instance");
            }

            if (target.HasPlatform(Opus.Core.EPlatform.Windows))
            {
                if (target.HasConfiguration(Opus.Core.EConfiguration.Debug))
                {
                    this.sourceFiles.AddRelativePaths(thirdPartyModule.BinPath, "QtCored4.dll");
                    this.sourceFiles.AddRelativePaths(thirdPartyModule.BinPath, "QtGuid4.dll");
                }
                else
                {
                    this.sourceFiles.AddRelativePaths(thirdPartyModule.BinPath, "QtCore4.dll");
                    this.sourceFiles.AddRelativePaths(thirdPartyModule.BinPath, "QtGui4.dll");
                }
            }
            else if (target.HasPlatform(Opus.Core.EPlatform.Unix))
            {
                this.sourceFiles.AddRelativePaths(thirdPartyModule.BinPath, "libQtCore.so");
                this.sourceFiles.AddRelativePaths(thirdPartyModule.BinPath, "libQtGui.so");
            }
        }

        [Opus.Core.SourceFiles]
        Opus.Core.FileCollection sourceFiles = new Opus.Core.FileCollection();

        [FileUtilities.DestinationModuleDirectory(C.OutputFileFlags.Executable)]
        Opus.Core.TypeArray destinationTarget = new Opus.Core.TypeArray(typeof(QtApplication));
    }
#else
#error Unknown FileUtilities package version
#endif
#endif
}

