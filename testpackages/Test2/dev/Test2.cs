// Automatically generated by Opus v0.00
namespace Test2
{
    static class BuildOutputDirHelper
    {
        public static void
        Change(
            Opus.Core.BaseModule module,
            Opus.Core.LocationKey key)
        {
            var output = module.Locations[key] as Opus.Core.ScaffoldLocation;
            var banana = module.Locations[Opus.Core.State.ModuleBuildDirLocationKey].SubDirectory("banana");
            output.SetReference(banana);
            //output.SpecifyStub(module.Locations[Opus.Core.State.BuildRootLocationKey], "banana", Opus.Core.Location.EExists.WillExist);
        }
    }

    // Define module classes here
    sealed class Library :
        C.StaticLibrary
    {
        public
        Library()
        {
            // TODO: want to share the LocationMap between all related modules
            var includeDir = this.PackageLocation.SubDirectory("include");
            this.headerFiles.Include(includeDir, "*.h");

            BuildOutputDirHelper.Change(this, C.StaticLibrary.OutputDirLocKey);
        }

        sealed class SourceFiles :
            C.ObjectFileCollection
        {
            public
            SourceFiles()
            {
                var sourceDir = this.PackageLocation.SubDirectory("source");
                this.Include(sourceDir, "library.c");
                this.UpdateOptions += SetIncludePaths;
            }

            [C.ExportCompilerOptionsDelegate]
            public void
            SetIncludePaths(
                Opus.Core.IModule module,
                Opus.Core.Target target)
            {
                var compilerOptions = module.Options as C.ICCompilerOptions;
                compilerOptions.IncludePaths.Include(this.PackageLocation.SubDirectory("include"));
            }
        }

        [Opus.Core.SourceFiles]
        SourceFiles sourceFiles = new SourceFiles();

        [C.HeaderFiles]
        Opus.Core.FileCollection headerFiles = new Opus.Core.FileCollection();
    }

    sealed class Application :
        C.Application
    {
        public
        Application()
        {
            BuildOutputDirHelper.Change(this, C.Application.OutputDir);
        }

        sealed class SourceFiles :
            C.ObjectFileCollection
        {
            public
            SourceFiles()
            {
                var sourceDir = this.PackageLocation.SubDirectory("source");
                this.Include(sourceDir, "application.c");
            }
        }

        [Opus.Core.SourceFiles]
        SourceFiles sourceFiles = new SourceFiles();

        [Opus.Core.DependentModules]
        Opus.Core.TypeArray dependents = new Opus.Core.TypeArray(
            typeof(Library),
            typeof(Test3.Library2)
        );

        [Opus.Core.DependentModules(Platform=Opus.Core.EPlatform.Windows, ToolsetTypes=new[]{typeof(VisualC.Toolset)})]
        Opus.Core.TypeArray winVCDependents = new Opus.Core.TypeArray(typeof(WindowsSDK.WindowsSDK));

        [C.RequiredLibraries(Platform = Opus.Core.EPlatform.Windows, ToolsetTypes=new[]{typeof(VisualC.Toolset)})]
        Opus.Core.StringArray libraries = new Opus.Core.StringArray("KERNEL32.lib");
    }
}
