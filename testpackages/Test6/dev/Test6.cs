// Automatically generated by Opus v0.00
namespace Test6
{
    // Define module classes here
    class ConditionalApplication : C.Application
    {
        // TODO: derive C.SourceFiles from this attribute?
        [Opus.Core.SourceFiles]
        private SourceFiles sourceFiles;

        public ConditionalApplication(Opus.Core.Target target)
        {
            this.sourceFiles = new SourceFiles(target);
            this.UpdateOptions += this.OverrideOptionCollection;
        }

        class SourceFiles : C.ObjectFileCollection
        {
            public SourceFiles(Opus.Core.Target target)
            {
                this.UpdateOptions += this.OverrideOptionCollection;

                var sourceDir = this.PackageLocation.SubDirectory("source");
                var debugSourceDir = sourceDir.SubDirectory("debug");
                var optSourceDir = sourceDir.SubDirectory("optimized");

                var mainObjectFile = new C.ObjectFile();
                mainObjectFile.Include(sourceDir, "main.c");
                mainObjectFile.UpdateOptions += MainUpdateOptionCollection;
                this.Add(mainObjectFile);

                if (target.HasConfiguration(Opus.Core.EConfiguration.Debug))
                {
                    this.Include(debugSourceDir, "debug.c");
                }
                else
                {
                    this.Include(optSourceDir, "optimized.c");
                }
            }

            private void OverrideOptionCollection(Opus.Core.IModule module, Opus.Core.Target target)
            {
                var compilerOptions = module.Options as C.ICCompilerOptions;
                compilerOptions.IncludePaths.Include(this.PackageLocation, "include");
            }

            private void MainUpdateOptionCollection(Opus.Core.IModule module, Opus.Core.Target target)
            {
                var compilerOptions = module.Options as C.ICCompilerOptions;
                compilerOptions.Defines.Add("MAIN_C");
                compilerOptions.IncludePaths.Include(this.PackageLocation, "include", "platform");
            }
        }

        private void OverrideOptionCollection(Opus.Core.IModule module, Opus.Core.Target target)
        {
            var options = module.Options as C.ILinkerOptions;
            //options.DebugSymbols = false;
        }

        [Opus.Core.DependentModules(Platform = Opus.Core.EPlatform.Windows, ToolsetTypes = new[] { typeof(VisualC.Toolset) })]
        Opus.Core.TypeArray winVCDependents = new Opus.Core.TypeArray(typeof(WindowsSDK.WindowsSDK));

        [C.RequiredLibraries(Platform = Opus.Core.EPlatform.Windows, ToolsetTypes = new[] { typeof(VisualC.Toolset) })]
        Opus.Core.StringArray libraries = new Opus.Core.StringArray("KERNEL32.lib");
    }
}
